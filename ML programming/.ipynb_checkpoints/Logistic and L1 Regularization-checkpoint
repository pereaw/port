{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "214981c6-9130-4991-a72b-e8fa9066a64c",
   "metadata": {},
   "source": [
    "# HW 2\n",
    "### Conceptual Questions\n",
    "### A1. The answers to these questions should be answerable without referring to external materials. Briefly justify your answers with a few words.\n",
    "1.  Due to the shape of the regulizer, the L1 norm is likely to select optimal solutions along the axes, resulting in 0 for orthogonal axes.\n",
    "2.  If we are interested in a sparse matrix, this regulizer will find them more aggressively than say |x|. A disadvantage could be that it will penalize weight values (Thetas) close to 0 far more than larger thetas.\n",
    "3. True, a step size too large will 'overshoot' and make finding a bottom very difficult. \n",
    "4. An advantage is that it is computationally more efficient for extremely large sample sizes. A disadvantage is that it generally takes more steps.\n",
    "5. Logistic regression has no closed form solution (cost function is non-linear?).\n",
    "\n",
    "### A2. Shapes.\n",
    "A set $A \\subseteq \\mathbb{R}^n$ is convex if $\\lambda x + (1 − \\lambda)y \\in A$ for all $x, y \\in A$ and $\\lambda \\in [0, 1]$. For each of the grey-shaded sets below (I-II), state whether each one is convex, or state why it is not convex using any of the points a, b, c, d in your answer.\n",
    "\n",
    "1.  I. Not convex, a line between B and C crosses outside of the shape. This shows that for some value of lambda the above expression will be outside of the set.\n",
    "2.  II. Not convex, a line between A and D crosses outside of the shape.\n",
    "\n",
    "### A3. Functions\n",
    "We say a function $f : \\mathbb{R}^d \\to \\mathbb{R}$ is convex on a set A if $f (\\lambda x + (1 − \\lambda)y) \\le \\lambda f (x) + (1 − \\lambda)f (y)$\n",
    "for all $x, y \\in A$ and $\\lambda \\in [0, 1]$. For each of the functions shown below (I-II), state whether each is convex on the\n",
    "specified interval, or state why not with a counterexample using any of the points a, b, c, d in your answer.\n",
    "\n",
    "1. I. Convex, cannot draw a line from f(x) to f(y) that crosses through f for all x,y.\n",
    "2. I. Not convex, a line from a to c crosses through f.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70dd62c4-8432-4178-b07a-30e3472f2631",
   "metadata": {},
   "source": [
    "### A4 Lasso using ISTA algorithm\n",
    "Below is an iteration of Lasso using the ISTA algorithm which is a variant of the subgradient descent method of finding a minimum for our loss function.\n",
    "\n",
    "1. See plot below.\n",
    "2. See plot below.\n",
    "3. Lambda can be either too high or too low forcing many of our regression coefficients to 0 or not cutting them harsh enough. There is going to be a sweet spot that can be seen in the FDR/TPR curve (I think this might be like a modified AUC curve except for whether weights are classified as 0 or nonzero?) which can indicate a good level of regularization resulting in a good amount of 'true features' being captured without capturing too many false features. However we never know the true values of w.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "eb910e04-04fc-4e44-8461-6239ebf76b08",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Wil\\anaconda3\\envs\\cse446\\lib\\site-packages\\tqdm\\auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "from typing import Optional, Tuple\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "from utils import problem\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "50431cc3-5df2-4466-9ecf-bae94b7b13e7",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0\n",
      "0.00011594153378885474\n",
      "2.779684565795431\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Wil\\AppData\\Local\\Temp\\ipykernel_47084\\2734246088.py:191: RuntimeWarning: invalid value encountered in long_scalars\n",
      "  fdr = sum((w_hat != 0) & (w ==0) )/sum((w_hat != 0 ))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14.456425871488992\n",
      "27.53505258657805\n",
      "37.113534114463235\n",
      "42.32416580210826\n",
      "44.66038212402413\n",
      "45.7668387390837\n",
      "46.65929295733913\n",
      "47.80647370123478\n",
      "49.22651398307469\n",
      "50.42246603656855\n",
      "51.83254326774941\n",
      "52.46250116802656\n",
      "52.52656993179056\n",
      "52.55911907372378\n",
      "52.57503294771029\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from typing import Optional, Tuple\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "from utils import problem\n",
    "\n",
    "def step(\n",
    "    X: np.ndarray, y: np.ndarray, weight: np.ndarray, bias: float, _lambda: float, eta: float\n",
    ") -> Tuple[np.ndarray, float]:\n",
    "    \"\"\"Single step in ISTA algorithm.\n",
    "    It should update every entry in weight, and then return an updated version of weight along with calculated bias on input weight!\n",
    "\n",
    "    Args:\n",
    "        X (np.ndarray): An (n x d) matrix, with n observations each with d features.\n",
    "        y (np.ndarray): An (n, ) array, with n observations of targets.\n",
    "        weight (np.ndarray): An (d,) array. Weight returned from the step before.\n",
    "        bias (float): Bias returned from the step before.\n",
    "        _lambda (float): Regularization constant. Determines when weight is updated to 0, and when to other values.\n",
    "        eta (float): Step-size. Determines how far the ISTA iteration moves for each step.\n",
    "\n",
    "    Returns:\n",
    "        Tuple[np.ndarray, float]: Tuple with 2 entries. First represents updated weight vector, second represents bias.\n",
    "    \n",
    "    \"\"\"\n",
    "    y_pred = X @ weight\n",
    "    #Calculate bias\n",
    "    bias_prime = bias -  2 * eta * np.sum(y_pred + bias -y)\n",
    "    #calculate weight\n",
    "    weight_prime = weight - 2 * eta * (X.T @ (y_pred + bias - y))\n",
    "    #update weight\n",
    "    weight_prime = np.where(np.abs(weight_prime) > 2 * eta * _lambda,\n",
    "                            weight_prime - np.sign(weight_prime) * 2 * eta * _lambda,\n",
    "                            0)\n",
    "\n",
    "    return(weight_prime,bias_prime)\n",
    "\n",
    "def loss(\n",
    "    X: np.ndarray, y: np.ndarray, weight: np.ndarray, bias: float, _lambda: float\n",
    ") -> float:\n",
    "    \"\"\"L-1 (Lasso) regularized MSE loss.\n",
    "           \n",
    "    Args:\n",
    "        X (np.ndarray): An (n x d) matrix, with n observations each with d features.\n",
    "        y (np.ndarray): An (n, ) array, with n observations of targets.\n",
    "        weight (np.ndarray): An (d,) array. Currently predicted weights.\n",
    "        bias (float): Currently predicted bias.\n",
    "        _lambda (float): Regularization constant. Should be used along with L1 norm of weight.\n",
    "\n",
    "    Returns:\n",
    "        float: value of the loss function\n",
    "    \"\"\"\n",
    "    y_pred = X @ weight\n",
    "    loss = np.sum((y_pred+bias-y)**2) + _lambda*np.sum(np.abs(weight)) #loss function for lasso \n",
    "    return(loss)\n",
    "\n",
    "\n",
    "def train(\n",
    "    X: np.ndarray,\n",
    "    y: np.ndarray,\n",
    "    _lambda: float = 0.01,\n",
    "    eta: float = 0.001,\n",
    "    convergence_delta: float = 1e-4,\n",
    "    start_weight: np.ndarray = None,\n",
    "    start_bias: float = None\n",
    ") -> Tuple[np.ndarray, float]:\n",
    "    \"\"\"Trains a model and returns predicted weight and bias.\n",
    "\n",
    "    Args:\n",
    "        X (np.ndarray): An (n x d) matrix, with n observations each with d features.\n",
    "        y (np.ndarray): An (n, ) array, with n observations of targets.\n",
    "        _lambda (float): Regularization constant. Should be used for both step and loss.\n",
    "        eta (float): Step size.\n",
    "        convergence_delta (float, optional): Defines when to stop training algorithm.\n",
    "            The smaller the value the longer algorithm will train.\n",
    "            Defaults to 1e-4.\n",
    "        start_weight (np.ndarray, optional): Weight for hot-starting model.\n",
    "            If None, defaults to array of zeros. Defaults to None.\n",
    "            It can be useful when testing for multiple values of lambda.\n",
    "        start_bias (np.ndarray, optional): Bias for hot-starting model.\n",
    "            If None, defaults to zero. Defaults to None.\n",
    "            It can be useful when testing for multiple values of lambda.\n",
    "\n",
    "    Returns:\n",
    "        Tuple[np.ndarray, float]: A tuple with first item being array of shape (d,) representing predicted weights,\n",
    "            and second item being a float representing the bias.\n",
    "\n",
    "    \"\"\"\n",
    "    if start_weight is None:\n",
    "        start_weight = np.zeros(X.shape[1])\n",
    "    if start_bias is None:\n",
    "        start_bias = 0\n",
    "        \n",
    "    old_w: Optional[np.ndarray] = np.copy(start_weight)\n",
    "    \n",
    "    #initiate weight and bias\n",
    "    w,b = step(X,y, weight = start_weight, bias = start_bias, _lambda = _lambda,eta = eta)\n",
    "    \n",
    "    while convergence_criterion(w, old_w,bias = b, old_b = start_bias, convergence_delta = convergence_delta) == False:\n",
    "        old_w = np.copy(w),\n",
    "        start_bias = np.copy(b)\n",
    "        w, b = step(X, y, w, b, _lambda, eta)\n",
    "        delta = np.max(np.abs(w - old_w))\n",
    "\n",
    "    return(w, b)\n",
    "    \n",
    "\n",
    "\n",
    "def convergence_criterion(\n",
    "    weight: np.ndarray, old_w: np.ndarray, bias: float, old_b: float, convergence_delta: float\n",
    ") -> bool:\n",
    "    \"\"\"Function determining whether weight has converged or not.\n",
    "    It should calculate the maximum absolute change between weight and old_w vector, and compate it to convergence delta.\n",
    "\n",
    "    Args:\n",
    "        weight (np.ndarray): Weight from current iteration of coordinate gradient descent.\n",
    "        old_w (np.ndarray): Weight from previous iteration of coordinate gradient descent.\n",
    "        convergence_delta (float): Aggressiveness of the check.\n",
    "\n",
    "    Returns:\n",
    "        bool: False, if weight has not converged yet. True otherwise.\n",
    "    \"\"\"\n",
    "    # old_wb = np.append(old_b,old_w)\n",
    "    # wb = np.append(bias,weight)\n",
    "    # if np.max(np.abs(wb-old_wb)) < convergence_delta:\n",
    "    #     return True\n",
    "    # else:\n",
    "    #     return False\n",
    "    wb = np.append(bias, weight)\n",
    "    old_wb = np.append(old_b, old_w)\n",
    "    change = abs(wb - old_wb)\n",
    "    return change.max() < convergence_delta\n",
    "    \n",
    "def calc_lambda(X_train,\n",
    "                y_train,\n",
    "                factor = 2):\n",
    "    '''\n",
    "    Args:\n",
    "        X (np.ndarray): An (n x d) matrix, with n observations each with d features.\n",
    "        y (np.ndarray): An (n, ) array, with n observations of targets.\n",
    "    \n",
    "    Returns:\n",
    "    lambda_range (list): A list ranging from the maximum lambda (resulting in all 0\n",
    "    vector for weights) to lambda >0.1. Each step is by the given factor.\n",
    "    '''\n",
    "    lambda_max = np.max(2*np.abs(X_train.T@(y_train - (1/X_train.shape[0]*np.sum(y_train)))))\n",
    "    lambda_range = []\n",
    "    while lambda_max >= 0.01:\n",
    "        lambda_range.append(lambda_max)\n",
    "        lambda_max = lambda_max/factor\n",
    "    return lambda_range\n",
    "\n",
    "def main():\n",
    "    \"\"\"\n",
    "    Use all of the functions above to make plots.\n",
    "    \"\"\"\n",
    "    ##Generate data\n",
    "    X_sim = np.random.randn(500,1000) #500 x values normally distributed.\n",
    "    w = np.array(list(range(1,1001))) #1-1000\n",
    "    w= w/100\n",
    "    w[w>1] = 0\n",
    "    error = np.random.randn(500,)\n",
    "    y_sim = X_sim @ w + error #create y based off of X w/ error term\n",
    "    \n",
    "    zeros = []\n",
    "    fdr_list = []\n",
    "    tpr_list = []\n",
    "\n",
    "    lambda_range = calc_lambda(X_sim,y_sim,factor = 2)\n",
    "    for reg_lambda in lambda_range:\n",
    "        w_hat, b_hat = train(X_sim, y_sim, _lambda = reg_lambda, start_weight = w,start_bias = 1, eta = 0.0001)\n",
    "        print(sum(w_hat))\n",
    "        zeros.append(sum(w_hat ==0))\n",
    "        fdr = sum((w_hat != 0) & (w ==0) )/sum((w_hat != 0 ))\n",
    "        tpr = sum((w_hat !=0) & (w !=0))/100\n",
    "        fdr_list.append(fdr)\n",
    "        tpr_list.append(tpr)\n",
    "\n",
    "\n",
    "    plt.figure(figsize = (12,6))\n",
    "    plt.subplot(1,2,1)\n",
    "    plt.suptitle(\"Effects of Lambda on Weight Vector Lasso\", fontsize=12, y = 0.92)\n",
    "    plt.plot(lambda_range, zeros)\n",
    "    plt.xscale('log')\n",
    "    plt.xlabel('Lambda')\n",
    "    plt.ylabel('Number of Zeros in Weight vector')\n",
    "    #plt.subplots_adjust(wspace = 0.4)\n",
    "    \n",
    "\n",
    "    plt.subplot(1,2,2)\n",
    "    plt.plot(fdr_list,tpr_list)\n",
    "    plt.xlabel(\"FDR\")\n",
    "    plt.ylabel(\"TPR\")\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59025826-1097-42d9-8913-32ec69c3fc0a",
   "metadata": {},
   "source": [
    "### A5 Lasso on real crime data\n",
    "\n",
    "We download a dataset with many features with some sort of plausible connection to crime plus the target variable of interest (Per Capita Violent Crimes). The dataset is designed in a way that it essentially has 'too many' features. The data combines socio-economic data from the 1990 US Census, law enforcement data from the 1990 US LEMAS survey, and crime data from the 1995 FBI UCR. You can read the details [here](http://archive.ics.uci.edu/ml/datasets/communities+and+crime). \n",
    "\n",
    "We're going to run our above lasso solver on the dataset and analyze some of the relationships we see. Due to the nature of the data intepretation of results is extremely important and jumping to conclusions about the causation of any features may be irresponsible.\n",
    "\n",
    "1. 3 features which may have variablility due to US historical policy changes could be: PolicBudgPerPop - Police budget can vary drastically based on location in the US, NumStreet - This is the number of homeless people on the street. Different communities have different enforcement for homeless people and areas near county jails tend to have more homeless. PctNotHSGrad - The percentage of HS graduates in a community can vary greatly based on industry in the area as well as funding for public schools.\n",
    "\n",
    "2. 3 features which if they have a non-zero weight in the final model might be interpreted as reasons for higher levels of violent crime, but which might actually be a result rather than (or in addition to being) the cause of this violence. HousVacant houses could be empty due to high crime, PolicePerPop police pop could be higher due to violence, racepctblack violent crime could drive out the historically more advantaged racial groups.\n",
    "\n",
    "3. See below.\n",
    "\n",
    "4. See below.\n",
    "\n",
    "5. The highest was PctIlleg and the lowest was PctKids2Par. Having two parents in a relationship is a huge indicator of both financial and emotional support which could be correlated highly with violent crime.\n",
    "\n",
    "6. Correlation is not causation.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4dcf1d14-e596-4b25-b7b5-2914025971a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "pd.options.display.max_columns = 999\n",
    "\n",
    "df_train = pd.read_table(\"C:/Users/Wil/cse446/hw2/data/crime-data/crime-train.txt\") \n",
    "df_test = pd.read_table(\"C:/Users/Wil/cse446/hw2/data/crime-data/crime-test.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f44469ff-37f6-44a6-b044-11760fc4cb34",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1595, 96) (399, 96)\n"
     ]
    }
   ],
   "source": [
    "print(df_train.shape, df_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2de73216-bdb0-40e1-b1b8-e4b2d8622caf",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1595 entries, 0 to 1594\n",
      "Data columns (total 96 columns):\n",
      " #   Column                 Non-Null Count  Dtype  \n",
      "---  ------                 --------------  -----  \n",
      " 0   ViolentCrimesPerPop    1595 non-null   float64\n",
      " 1   population             1595 non-null   float64\n",
      " 2   householdsize          1595 non-null   float64\n",
      " 3   agePct12t21            1595 non-null   float64\n",
      " 4   agePct12t29            1595 non-null   float64\n",
      " 5   agePct16t24            1595 non-null   float64\n",
      " 6   agePct65up             1595 non-null   float64\n",
      " 7   numbUrban              1595 non-null   float64\n",
      " 8   pctUrban               1595 non-null   float64\n",
      " 9   medIncome              1595 non-null   float64\n",
      " 10  pctWWage               1595 non-null   float64\n",
      " 11  pctWFarmSelf           1595 non-null   float64\n",
      " 12  pctWInvInc             1595 non-null   float64\n",
      " 13  pctWSocSec             1595 non-null   float64\n",
      " 14  pctWPubAsst            1595 non-null   float64\n",
      " 15  pctWRetire             1595 non-null   float64\n",
      " 16  medFamInc              1595 non-null   float64\n",
      " 17  perCapInc              1595 non-null   float64\n",
      " 18  whitePerCap            1595 non-null   float64\n",
      " 19  blackPerCap            1595 non-null   float64\n",
      " 20  indianPerCap           1595 non-null   float64\n",
      " 21  AsianPerCap            1595 non-null   float64\n",
      " 22  HispPerCap             1595 non-null   float64\n",
      " 23  NumUnderPov            1595 non-null   float64\n",
      " 24  PctPopUnderPov         1595 non-null   float64\n",
      " 25  PctLess9thGrade        1595 non-null   float64\n",
      " 26  PctNotHSGrad           1595 non-null   float64\n",
      " 27  PctBSorMore            1595 non-null   float64\n",
      " 28  PctUnemployed          1595 non-null   float64\n",
      " 29  PctEmploy              1595 non-null   float64\n",
      " 30  PctEmplManu            1595 non-null   float64\n",
      " 31  PctEmplProfServ        1595 non-null   float64\n",
      " 32  PctOccupManu           1595 non-null   float64\n",
      " 33  PctOccupMgmtProf       1595 non-null   float64\n",
      " 34  MalePctDivorce         1595 non-null   float64\n",
      " 35  MalePctNevMarr         1595 non-null   float64\n",
      " 36  FemalePctDiv           1595 non-null   float64\n",
      " 37  TotalPctDiv            1595 non-null   float64\n",
      " 38  PersPerFam             1595 non-null   float64\n",
      " 39  PctFam2Par             1595 non-null   float64\n",
      " 40  PctKids2Par            1595 non-null   float64\n",
      " 41  PctYoungKids2Par       1595 non-null   float64\n",
      " 42  PctTeen2Par            1595 non-null   float64\n",
      " 43  PctWorkMomYoungKids    1595 non-null   float64\n",
      " 44  PctWorkMom             1595 non-null   float64\n",
      " 45  NumIlleg               1595 non-null   float64\n",
      " 46  PctIlleg               1595 non-null   float64\n",
      " 47  NumImmig               1595 non-null   float64\n",
      " 48  PctImmigRecent         1595 non-null   float64\n",
      " 49  PctImmigRec5           1595 non-null   float64\n",
      " 50  PctImmigRec8           1595 non-null   float64\n",
      " 51  PctImmigRec10          1595 non-null   float64\n",
      " 52  PctRecentImmig         1595 non-null   float64\n",
      " 53  PctRecImmig5           1595 non-null   float64\n",
      " 54  PctRecImmig8           1595 non-null   float64\n",
      " 55  PctRecImmig10          1595 non-null   float64\n",
      " 56  PctSpeakEnglOnly       1595 non-null   float64\n",
      " 57  PctNotSpeakEnglWell    1595 non-null   float64\n",
      " 58  PctLargHouseFam        1595 non-null   float64\n",
      " 59  PctLargHouseOccup      1595 non-null   float64\n",
      " 60  PersPerOccupHous       1595 non-null   float64\n",
      " 61  PersPerOwnOccHous      1595 non-null   float64\n",
      " 62  PersPerRentOccHous     1595 non-null   float64\n",
      " 63  PctPersOwnOccup        1595 non-null   float64\n",
      " 64  PctPersDenseHous       1595 non-null   float64\n",
      " 65  PctHousLess3BR         1595 non-null   float64\n",
      " 66  MedNumBR               1595 non-null   float64\n",
      " 67  HousVacant             1595 non-null   float64\n",
      " 68  PctHousOccup           1595 non-null   float64\n",
      " 69  PctHousOwnOcc          1595 non-null   float64\n",
      " 70  PctVacantBoarded       1595 non-null   float64\n",
      " 71  PctVacMore6Mos         1595 non-null   float64\n",
      " 72  MedYrHousBuilt         1595 non-null   float64\n",
      " 73  PctHousNoPhone         1595 non-null   float64\n",
      " 74  PctWOFullPlumb         1595 non-null   float64\n",
      " 75  OwnOccLowQuart         1595 non-null   float64\n",
      " 76  OwnOccMedVal           1595 non-null   float64\n",
      " 77  OwnOccHiQuart          1595 non-null   float64\n",
      " 78  RentLowQ               1595 non-null   float64\n",
      " 79  RentMedian             1595 non-null   float64\n",
      " 80  RentHighQ              1595 non-null   float64\n",
      " 81  MedRent                1595 non-null   float64\n",
      " 82  MedRentPctHousInc      1595 non-null   float64\n",
      " 83  MedOwnCostPctInc       1595 non-null   float64\n",
      " 84  MedOwnCostPctIncNoMtg  1595 non-null   float64\n",
      " 85  NumInShelters          1595 non-null   float64\n",
      " 86  NumStreet              1595 non-null   float64\n",
      " 87  PctForeignBorn         1595 non-null   float64\n",
      " 88  PctBornSameState       1595 non-null   float64\n",
      " 89  PctSameHouse85         1595 non-null   float64\n",
      " 90  PctSameCity85          1595 non-null   float64\n",
      " 91  PctSameState85         1595 non-null   float64\n",
      " 92  LandArea               1595 non-null   float64\n",
      " 93  PopDens                1595 non-null   float64\n",
      " 94  PctUsePubTrans         1595 non-null   float64\n",
      " 95  LemasPctOfficDrugUn    1595 non-null   float64\n",
      "dtypes: float64(96)\n",
      "memory usage: 1.2 MB\n"
     ]
    }
   ],
   "source": [
    "df_train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fef42952-0414-4abb-abf6-cff275d8927d",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ViolentCrimesPerPop</th>\n",
       "      <th>population</th>\n",
       "      <th>householdsize</th>\n",
       "      <th>agePct12t21</th>\n",
       "      <th>agePct12t29</th>\n",
       "      <th>agePct16t24</th>\n",
       "      <th>agePct65up</th>\n",
       "      <th>numbUrban</th>\n",
       "      <th>pctUrban</th>\n",
       "      <th>medIncome</th>\n",
       "      <th>pctWWage</th>\n",
       "      <th>pctWFarmSelf</th>\n",
       "      <th>pctWInvInc</th>\n",
       "      <th>pctWSocSec</th>\n",
       "      <th>pctWPubAsst</th>\n",
       "      <th>pctWRetire</th>\n",
       "      <th>medFamInc</th>\n",
       "      <th>perCapInc</th>\n",
       "      <th>whitePerCap</th>\n",
       "      <th>blackPerCap</th>\n",
       "      <th>indianPerCap</th>\n",
       "      <th>AsianPerCap</th>\n",
       "      <th>HispPerCap</th>\n",
       "      <th>NumUnderPov</th>\n",
       "      <th>PctPopUnderPov</th>\n",
       "      <th>PctLess9thGrade</th>\n",
       "      <th>PctNotHSGrad</th>\n",
       "      <th>PctBSorMore</th>\n",
       "      <th>PctUnemployed</th>\n",
       "      <th>PctEmploy</th>\n",
       "      <th>PctEmplManu</th>\n",
       "      <th>PctEmplProfServ</th>\n",
       "      <th>PctOccupManu</th>\n",
       "      <th>PctOccupMgmtProf</th>\n",
       "      <th>MalePctDivorce</th>\n",
       "      <th>MalePctNevMarr</th>\n",
       "      <th>FemalePctDiv</th>\n",
       "      <th>TotalPctDiv</th>\n",
       "      <th>PersPerFam</th>\n",
       "      <th>PctFam2Par</th>\n",
       "      <th>PctKids2Par</th>\n",
       "      <th>PctYoungKids2Par</th>\n",
       "      <th>PctTeen2Par</th>\n",
       "      <th>PctWorkMomYoungKids</th>\n",
       "      <th>PctWorkMom</th>\n",
       "      <th>NumIlleg</th>\n",
       "      <th>PctIlleg</th>\n",
       "      <th>NumImmig</th>\n",
       "      <th>PctImmigRecent</th>\n",
       "      <th>PctImmigRec5</th>\n",
       "      <th>PctImmigRec8</th>\n",
       "      <th>PctImmigRec10</th>\n",
       "      <th>PctRecentImmig</th>\n",
       "      <th>PctRecImmig5</th>\n",
       "      <th>PctRecImmig8</th>\n",
       "      <th>PctRecImmig10</th>\n",
       "      <th>PctSpeakEnglOnly</th>\n",
       "      <th>PctNotSpeakEnglWell</th>\n",
       "      <th>PctLargHouseFam</th>\n",
       "      <th>PctLargHouseOccup</th>\n",
       "      <th>PersPerOccupHous</th>\n",
       "      <th>PersPerOwnOccHous</th>\n",
       "      <th>PersPerRentOccHous</th>\n",
       "      <th>PctPersOwnOccup</th>\n",
       "      <th>PctPersDenseHous</th>\n",
       "      <th>PctHousLess3BR</th>\n",
       "      <th>MedNumBR</th>\n",
       "      <th>HousVacant</th>\n",
       "      <th>PctHousOccup</th>\n",
       "      <th>PctHousOwnOcc</th>\n",
       "      <th>PctVacantBoarded</th>\n",
       "      <th>PctVacMore6Mos</th>\n",
       "      <th>MedYrHousBuilt</th>\n",
       "      <th>PctHousNoPhone</th>\n",
       "      <th>PctWOFullPlumb</th>\n",
       "      <th>OwnOccLowQuart</th>\n",
       "      <th>OwnOccMedVal</th>\n",
       "      <th>OwnOccHiQuart</th>\n",
       "      <th>RentLowQ</th>\n",
       "      <th>RentMedian</th>\n",
       "      <th>RentHighQ</th>\n",
       "      <th>MedRent</th>\n",
       "      <th>MedRentPctHousInc</th>\n",
       "      <th>MedOwnCostPctInc</th>\n",
       "      <th>MedOwnCostPctIncNoMtg</th>\n",
       "      <th>NumInShelters</th>\n",
       "      <th>NumStreet</th>\n",
       "      <th>PctForeignBorn</th>\n",
       "      <th>PctBornSameState</th>\n",
       "      <th>PctSameHouse85</th>\n",
       "      <th>PctSameCity85</th>\n",
       "      <th>PctSameState85</th>\n",
       "      <th>LandArea</th>\n",
       "      <th>PopDens</th>\n",
       "      <th>PctUsePubTrans</th>\n",
       "      <th>LemasPctOfficDrugUn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.67</td>\n",
       "      <td>-0.45</td>\n",
       "      <td>-1.85</td>\n",
       "      <td>-1.06</td>\n",
       "      <td>0.67</td>\n",
       "      <td>0.08</td>\n",
       "      <td>-0.85</td>\n",
       "      <td>-0.34</td>\n",
       "      <td>0.68</td>\n",
       "      <td>-0.24</td>\n",
       "      <td>0.88</td>\n",
       "      <td>-0.89</td>\n",
       "      <td>-0.26</td>\n",
       "      <td>-1.27</td>\n",
       "      <td>-0.13</td>\n",
       "      <td>-0.53</td>\n",
       "      <td>-0.43</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.23</td>\n",
       "      <td>-0.26</td>\n",
       "      <td>-0.11</td>\n",
       "      <td>-0.20</td>\n",
       "      <td>-0.36</td>\n",
       "      <td>-0.28</td>\n",
       "      <td>-0.82</td>\n",
       "      <td>-0.71</td>\n",
       "      <td>-0.29</td>\n",
       "      <td>-0.46</td>\n",
       "      <td>1.32</td>\n",
       "      <td>0.86</td>\n",
       "      <td>-1.66</td>\n",
       "      <td>0.14</td>\n",
       "      <td>-0.44</td>\n",
       "      <td>2.95</td>\n",
       "      <td>1.11</td>\n",
       "      <td>2.41</td>\n",
       "      <td>2.75</td>\n",
       "      <td>-1.28</td>\n",
       "      <td>-0.90</td>\n",
       "      <td>-0.73</td>\n",
       "      <td>-0.29</td>\n",
       "      <td>-1.01</td>\n",
       "      <td>-0.25</td>\n",
       "      <td>0.02</td>\n",
       "      <td>-0.33</td>\n",
       "      <td>-0.04</td>\n",
       "      <td>-0.23</td>\n",
       "      <td>0.91</td>\n",
       "      <td>1.23</td>\n",
       "      <td>1.20</td>\n",
       "      <td>1.04</td>\n",
       "      <td>0.29</td>\n",
       "      <td>0.37</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.24</td>\n",
       "      <td>-0.23</td>\n",
       "      <td>-0.55</td>\n",
       "      <td>-0.80</td>\n",
       "      <td>-1.72</td>\n",
       "      <td>-1.29</td>\n",
       "      <td>-1.24</td>\n",
       "      <td>-1.54</td>\n",
       "      <td>0.07</td>\n",
       "      <td>1.88</td>\n",
       "      <td>-1.23</td>\n",
       "      <td>-0.38</td>\n",
       "      <td>0.36</td>\n",
       "      <td>-1.67</td>\n",
       "      <td>-0.85</td>\n",
       "      <td>-0.97</td>\n",
       "      <td>0.67</td>\n",
       "      <td>-0.43</td>\n",
       "      <td>-1.18</td>\n",
       "      <td>-0.24</td>\n",
       "      <td>-0.27</td>\n",
       "      <td>-0.25</td>\n",
       "      <td>0.34</td>\n",
       "      <td>0.04</td>\n",
       "      <td>-0.09</td>\n",
       "      <td>-0.07</td>\n",
       "      <td>-1.18</td>\n",
       "      <td>-0.69</td>\n",
       "      <td>-1.16</td>\n",
       "      <td>-0.29</td>\n",
       "      <td>-0.23</td>\n",
       "      <td>-0.02</td>\n",
       "      <td>-0.53</td>\n",
       "      <td>-1.08</td>\n",
       "      <td>-0.13</td>\n",
       "      <td>-0.66</td>\n",
       "      <td>-0.41</td>\n",
       "      <td>-0.56</td>\n",
       "      <td>1.26</td>\n",
       "      <td>-0.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.43</td>\n",
       "      <td>-0.45</td>\n",
       "      <td>-0.27</td>\n",
       "      <td>-0.22</td>\n",
       "      <td>-0.17</td>\n",
       "      <td>-0.34</td>\n",
       "      <td>-0.58</td>\n",
       "      <td>-0.50</td>\n",
       "      <td>-1.57</td>\n",
       "      <td>-0.29</td>\n",
       "      <td>0.12</td>\n",
       "      <td>-0.50</td>\n",
       "      <td>-0.59</td>\n",
       "      <td>-0.52</td>\n",
       "      <td>0.37</td>\n",
       "      <td>2.15</td>\n",
       "      <td>-0.48</td>\n",
       "      <td>-0.42</td>\n",
       "      <td>-0.42</td>\n",
       "      <td>-0.12</td>\n",
       "      <td>-0.81</td>\n",
       "      <td>-0.17</td>\n",
       "      <td>0.02</td>\n",
       "      <td>-0.36</td>\n",
       "      <td>-0.14</td>\n",
       "      <td>-0.21</td>\n",
       "      <td>0.23</td>\n",
       "      <td>-0.82</td>\n",
       "      <td>-0.02</td>\n",
       "      <td>0.45</td>\n",
       "      <td>-0.38</td>\n",
       "      <td>-0.86</td>\n",
       "      <td>0.50</td>\n",
       "      <td>-0.65</td>\n",
       "      <td>0.92</td>\n",
       "      <td>-0.14</td>\n",
       "      <td>1.27</td>\n",
       "      <td>1.12</td>\n",
       "      <td>-0.24</td>\n",
       "      <td>-0.95</td>\n",
       "      <td>-0.88</td>\n",
       "      <td>-1.07</td>\n",
       "      <td>-0.80</td>\n",
       "      <td>1.24</td>\n",
       "      <td>0.82</td>\n",
       "      <td>-0.24</td>\n",
       "      <td>0.91</td>\n",
       "      <td>-0.34</td>\n",
       "      <td>-1.14</td>\n",
       "      <td>-1.43</td>\n",
       "      <td>-1.24</td>\n",
       "      <td>-1.22</td>\n",
       "      <td>-0.68</td>\n",
       "      <td>-0.69</td>\n",
       "      <td>-0.61</td>\n",
       "      <td>-0.57</td>\n",
       "      <td>0.41</td>\n",
       "      <td>-0.50</td>\n",
       "      <td>-0.34</td>\n",
       "      <td>-0.27</td>\n",
       "      <td>-0.01</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.14</td>\n",
       "      <td>-0.72</td>\n",
       "      <td>-0.17</td>\n",
       "      <td>0.09</td>\n",
       "      <td>0.73</td>\n",
       "      <td>-0.44</td>\n",
       "      <td>0.72</td>\n",
       "      <td>-0.75</td>\n",
       "      <td>0.39</td>\n",
       "      <td>-0.71</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.85</td>\n",
       "      <td>1.00</td>\n",
       "      <td>-0.38</td>\n",
       "      <td>-0.40</td>\n",
       "      <td>-0.46</td>\n",
       "      <td>-0.35</td>\n",
       "      <td>-0.39</td>\n",
       "      <td>-0.62</td>\n",
       "      <td>-0.35</td>\n",
       "      <td>-0.06</td>\n",
       "      <td>-0.32</td>\n",
       "      <td>-0.64</td>\n",
       "      <td>-0.29</td>\n",
       "      <td>-0.23</td>\n",
       "      <td>-0.33</td>\n",
       "      <td>-0.58</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.22</td>\n",
       "      <td>-0.46</td>\n",
       "      <td>-0.50</td>\n",
       "      <td>-0.11</td>\n",
       "      <td>-0.62</td>\n",
       "      <td>-0.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.12</td>\n",
       "      <td>-0.14</td>\n",
       "      <td>1.87</td>\n",
       "      <td>0.55</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.02</td>\n",
       "      <td>-1.19</td>\n",
       "      <td>-0.03</td>\n",
       "      <td>0.68</td>\n",
       "      <td>1.05</td>\n",
       "      <td>1.81</td>\n",
       "      <td>-0.40</td>\n",
       "      <td>-0.37</td>\n",
       "      <td>-0.64</td>\n",
       "      <td>-0.53</td>\n",
       "      <td>2.03</td>\n",
       "      <td>0.68</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.17</td>\n",
       "      <td>0.58</td>\n",
       "      <td>-0.26</td>\n",
       "      <td>-0.37</td>\n",
       "      <td>0.29</td>\n",
       "      <td>-0.36</td>\n",
       "      <td>-0.89</td>\n",
       "      <td>-1.06</td>\n",
       "      <td>-0.66</td>\n",
       "      <td>-0.25</td>\n",
       "      <td>-0.17</td>\n",
       "      <td>1.20</td>\n",
       "      <td>-0.18</td>\n",
       "      <td>0.05</td>\n",
       "      <td>-0.11</td>\n",
       "      <td>-0.28</td>\n",
       "      <td>-0.66</td>\n",
       "      <td>0.09</td>\n",
       "      <td>0.01</td>\n",
       "      <td>-0.30</td>\n",
       "      <td>1.70</td>\n",
       "      <td>0.19</td>\n",
       "      <td>-0.39</td>\n",
       "      <td>0.76</td>\n",
       "      <td>0.35</td>\n",
       "      <td>2.07</td>\n",
       "      <td>1.90</td>\n",
       "      <td>-0.06</td>\n",
       "      <td>0.35</td>\n",
       "      <td>-0.12</td>\n",
       "      <td>-0.96</td>\n",
       "      <td>-0.76</td>\n",
       "      <td>-0.49</td>\n",
       "      <td>-0.60</td>\n",
       "      <td>-0.56</td>\n",
       "      <td>-0.43</td>\n",
       "      <td>-0.32</td>\n",
       "      <td>-0.31</td>\n",
       "      <td>0.11</td>\n",
       "      <td>-0.32</td>\n",
       "      <td>1.49</td>\n",
       "      <td>1.93</td>\n",
       "      <td>2.29</td>\n",
       "      <td>1.74</td>\n",
       "      <td>3.15</td>\n",
       "      <td>1.91</td>\n",
       "      <td>-0.32</td>\n",
       "      <td>-2.81</td>\n",
       "      <td>0.73</td>\n",
       "      <td>-0.44</td>\n",
       "      <td>1.29</td>\n",
       "      <td>2.22</td>\n",
       "      <td>1.82</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.11</td>\n",
       "      <td>-0.64</td>\n",
       "      <td>-0.64</td>\n",
       "      <td>-0.11</td>\n",
       "      <td>-0.23</td>\n",
       "      <td>-0.34</td>\n",
       "      <td>1.84</td>\n",
       "      <td>1.57</td>\n",
       "      <td>1.40</td>\n",
       "      <td>2.37</td>\n",
       "      <td>0.83</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0.34</td>\n",
       "      <td>-0.29</td>\n",
       "      <td>-0.23</td>\n",
       "      <td>-0.11</td>\n",
       "      <td>-1.51</td>\n",
       "      <td>1.07</td>\n",
       "      <td>0.07</td>\n",
       "      <td>-0.01</td>\n",
       "      <td>-0.41</td>\n",
       "      <td>0.77</td>\n",
       "      <td>0.52</td>\n",
       "      <td>-0.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.03</td>\n",
       "      <td>-0.38</td>\n",
       "      <td>0.53</td>\n",
       "      <td>-0.28</td>\n",
       "      <td>-0.79</td>\n",
       "      <td>-0.64</td>\n",
       "      <td>-0.35</td>\n",
       "      <td>-0.34</td>\n",
       "      <td>0.46</td>\n",
       "      <td>0.66</td>\n",
       "      <td>0.88</td>\n",
       "      <td>-0.64</td>\n",
       "      <td>1.04</td>\n",
       "      <td>-0.18</td>\n",
       "      <td>-0.94</td>\n",
       "      <td>1.38</td>\n",
       "      <td>0.43</td>\n",
       "      <td>0.42</td>\n",
       "      <td>0.22</td>\n",
       "      <td>-0.06</td>\n",
       "      <td>-1.24</td>\n",
       "      <td>2.14</td>\n",
       "      <td>0.51</td>\n",
       "      <td>-0.43</td>\n",
       "      <td>-1.06</td>\n",
       "      <td>-0.31</td>\n",
       "      <td>-0.41</td>\n",
       "      <td>-0.15</td>\n",
       "      <td>-1.20</td>\n",
       "      <td>0.86</td>\n",
       "      <td>1.35</td>\n",
       "      <td>-0.35</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.10</td>\n",
       "      <td>-1.32</td>\n",
       "      <td>-0.94</td>\n",
       "      <td>-1.64</td>\n",
       "      <td>-1.55</td>\n",
       "      <td>0.14</td>\n",
       "      <td>1.48</td>\n",
       "      <td>1.40</td>\n",
       "      <td>1.03</td>\n",
       "      <td>1.39</td>\n",
       "      <td>-0.60</td>\n",
       "      <td>0.42</td>\n",
       "      <td>-0.33</td>\n",
       "      <td>-0.83</td>\n",
       "      <td>-0.34</td>\n",
       "      <td>-1.32</td>\n",
       "      <td>-1.38</td>\n",
       "      <td>-0.99</td>\n",
       "      <td>-0.81</td>\n",
       "      <td>-0.73</td>\n",
       "      <td>-0.69</td>\n",
       "      <td>-0.61</td>\n",
       "      <td>-0.57</td>\n",
       "      <td>0.41</td>\n",
       "      <td>-0.46</td>\n",
       "      <td>-0.55</td>\n",
       "      <td>-0.32</td>\n",
       "      <td>0.75</td>\n",
       "      <td>0.67</td>\n",
       "      <td>-0.18</td>\n",
       "      <td>1.66</td>\n",
       "      <td>-0.79</td>\n",
       "      <td>-1.77</td>\n",
       "      <td>0.73</td>\n",
       "      <td>-0.44</td>\n",
       "      <td>0.88</td>\n",
       "      <td>1.73</td>\n",
       "      <td>-0.76</td>\n",
       "      <td>0.62</td>\n",
       "      <td>1.01</td>\n",
       "      <td>-0.88</td>\n",
       "      <td>-0.50</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.24</td>\n",
       "      <td>-0.06</td>\n",
       "      <td>-0.17</td>\n",
       "      <td>-0.02</td>\n",
       "      <td>-1.59</td>\n",
       "      <td>0.32</td>\n",
       "      <td>-1.01</td>\n",
       "      <td>-0.29</td>\n",
       "      <td>-0.23</td>\n",
       "      <td>-0.46</td>\n",
       "      <td>0.54</td>\n",
       "      <td>0.58</td>\n",
       "      <td>-0.08</td>\n",
       "      <td>-0.61</td>\n",
       "      <td>-0.23</td>\n",
       "      <td>-0.70</td>\n",
       "      <td>-0.62</td>\n",
       "      <td>-0.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.14</td>\n",
       "      <td>-0.30</td>\n",
       "      <td>-1.12</td>\n",
       "      <td>-0.74</td>\n",
       "      <td>-0.10</td>\n",
       "      <td>-0.40</td>\n",
       "      <td>-0.30</td>\n",
       "      <td>-0.19</td>\n",
       "      <td>0.68</td>\n",
       "      <td>0.76</td>\n",
       "      <td>0.67</td>\n",
       "      <td>-0.45</td>\n",
       "      <td>0.64</td>\n",
       "      <td>-1.10</td>\n",
       "      <td>-0.76</td>\n",
       "      <td>-1.37</td>\n",
       "      <td>1.23</td>\n",
       "      <td>1.93</td>\n",
       "      <td>2.10</td>\n",
       "      <td>2.79</td>\n",
       "      <td>0.46</td>\n",
       "      <td>1.01</td>\n",
       "      <td>1.17</td>\n",
       "      <td>-0.36</td>\n",
       "      <td>-0.80</td>\n",
       "      <td>-0.87</td>\n",
       "      <td>-1.30</td>\n",
       "      <td>2.10</td>\n",
       "      <td>-1.30</td>\n",
       "      <td>0.86</td>\n",
       "      <td>-1.02</td>\n",
       "      <td>1.88</td>\n",
       "      <td>-1.67</td>\n",
       "      <td>2.52</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.77</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.47</td>\n",
       "      <td>-0.31</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.34</td>\n",
       "      <td>0.94</td>\n",
       "      <td>-0.28</td>\n",
       "      <td>-1.19</td>\n",
       "      <td>-0.55</td>\n",
       "      <td>-0.33</td>\n",
       "      <td>-0.61</td>\n",
       "      <td>0.11</td>\n",
       "      <td>-0.09</td>\n",
       "      <td>-0.05</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.22</td>\n",
       "      <td>1.35</td>\n",
       "      <td>1.35</td>\n",
       "      <td>1.58</td>\n",
       "      <td>1.65</td>\n",
       "      <td>-1.48</td>\n",
       "      <td>0.59</td>\n",
       "      <td>-0.09</td>\n",
       "      <td>-0.32</td>\n",
       "      <td>-1.02</td>\n",
       "      <td>0.23</td>\n",
       "      <td>-1.18</td>\n",
       "      <td>-0.88</td>\n",
       "      <td>0.35</td>\n",
       "      <td>1.36</td>\n",
       "      <td>-1.23</td>\n",
       "      <td>-0.38</td>\n",
       "      <td>0.62</td>\n",
       "      <td>-1.34</td>\n",
       "      <td>-0.20</td>\n",
       "      <td>-0.81</td>\n",
       "      <td>-1.05</td>\n",
       "      <td>-1.01</td>\n",
       "      <td>-0.94</td>\n",
       "      <td>3.01</td>\n",
       "      <td>3.18</td>\n",
       "      <td>3.11</td>\n",
       "      <td>1.48</td>\n",
       "      <td>1.23</td>\n",
       "      <td>1.04</td>\n",
       "      <td>1.11</td>\n",
       "      <td>-0.12</td>\n",
       "      <td>0.75</td>\n",
       "      <td>-1.53</td>\n",
       "      <td>-0.29</td>\n",
       "      <td>-0.23</td>\n",
       "      <td>2.10</td>\n",
       "      <td>-0.92</td>\n",
       "      <td>-0.25</td>\n",
       "      <td>0.52</td>\n",
       "      <td>-0.06</td>\n",
       "      <td>-0.50</td>\n",
       "      <td>1.71</td>\n",
       "      <td>-0.27</td>\n",
       "      <td>-0.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>0.17</td>\n",
       "      <td>-0.30</td>\n",
       "      <td>-0.08</td>\n",
       "      <td>1.65</td>\n",
       "      <td>1.02</td>\n",
       "      <td>1.64</td>\n",
       "      <td>0.15</td>\n",
       "      <td>-0.50</td>\n",
       "      <td>-1.57</td>\n",
       "      <td>-0.20</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.09</td>\n",
       "      <td>0.64</td>\n",
       "      <td>0.22</td>\n",
       "      <td>-0.49</td>\n",
       "      <td>0.06</td>\n",
       "      <td>-0.08</td>\n",
       "      <td>-0.21</td>\n",
       "      <td>-0.36</td>\n",
       "      <td>-1.46</td>\n",
       "      <td>-0.69</td>\n",
       "      <td>-0.17</td>\n",
       "      <td>-0.31</td>\n",
       "      <td>-0.36</td>\n",
       "      <td>-0.45</td>\n",
       "      <td>-0.50</td>\n",
       "      <td>-0.56</td>\n",
       "      <td>0.47</td>\n",
       "      <td>0.18</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.26</td>\n",
       "      <td>0.40</td>\n",
       "      <td>-0.01</td>\n",
       "      <td>-0.01</td>\n",
       "      <td>-0.23</td>\n",
       "      <td>0.66</td>\n",
       "      <td>-0.16</td>\n",
       "      <td>-0.13</td>\n",
       "      <td>-0.70</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.24</td>\n",
       "      <td>-0.06</td>\n",
       "      <td>0.72</td>\n",
       "      <td>0.76</td>\n",
       "      <td>1.05</td>\n",
       "      <td>-0.24</td>\n",
       "      <td>-0.48</td>\n",
       "      <td>-0.34</td>\n",
       "      <td>-0.69</td>\n",
       "      <td>0.04</td>\n",
       "      <td>-0.09</td>\n",
       "      <td>-0.30</td>\n",
       "      <td>-0.64</td>\n",
       "      <td>-0.52</td>\n",
       "      <td>-0.53</td>\n",
       "      <td>-0.57</td>\n",
       "      <td>0.64</td>\n",
       "      <td>-0.55</td>\n",
       "      <td>-0.75</td>\n",
       "      <td>-0.74</td>\n",
       "      <td>-0.60</td>\n",
       "      <td>-0.22</td>\n",
       "      <td>-0.81</td>\n",
       "      <td>-0.11</td>\n",
       "      <td>-0.60</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.73</td>\n",
       "      <td>-0.38</td>\n",
       "      <td>0.47</td>\n",
       "      <td>-0.32</td>\n",
       "      <td>-0.80</td>\n",
       "      <td>-0.65</td>\n",
       "      <td>-0.79</td>\n",
       "      <td>0.02</td>\n",
       "      <td>-0.26</td>\n",
       "      <td>0.02</td>\n",
       "      <td>-0.02</td>\n",
       "      <td>-0.04</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0.31</td>\n",
       "      <td>0.22</td>\n",
       "      <td>1.18</td>\n",
       "      <td>0.86</td>\n",
       "      <td>1.80</td>\n",
       "      <td>-0.29</td>\n",
       "      <td>-0.23</td>\n",
       "      <td>-0.63</td>\n",
       "      <td>-0.73</td>\n",
       "      <td>-0.41</td>\n",
       "      <td>-0.53</td>\n",
       "      <td>-1.22</td>\n",
       "      <td>0.41</td>\n",
       "      <td>-0.90</td>\n",
       "      <td>-0.71</td>\n",
       "      <td>-0.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>0.17</td>\n",
       "      <td>-0.38</td>\n",
       "      <td>-0.08</td>\n",
       "      <td>0.10</td>\n",
       "      <td>-0.31</td>\n",
       "      <td>-0.16</td>\n",
       "      <td>0.32</td>\n",
       "      <td>-0.27</td>\n",
       "      <td>0.68</td>\n",
       "      <td>0.09</td>\n",
       "      <td>-0.43</td>\n",
       "      <td>0.09</td>\n",
       "      <td>-0.03</td>\n",
       "      <td>0.22</td>\n",
       "      <td>-0.08</td>\n",
       "      <td>1.32</td>\n",
       "      <td>0.02</td>\n",
       "      <td>-0.16</td>\n",
       "      <td>-0.36</td>\n",
       "      <td>-0.18</td>\n",
       "      <td>0.83</td>\n",
       "      <td>2.55</td>\n",
       "      <td>0.02</td>\n",
       "      <td>-0.36</td>\n",
       "      <td>-0.49</td>\n",
       "      <td>-0.17</td>\n",
       "      <td>0.13</td>\n",
       "      <td>-0.96</td>\n",
       "      <td>0.23</td>\n",
       "      <td>-0.35</td>\n",
       "      <td>0.31</td>\n",
       "      <td>-0.06</td>\n",
       "      <td>0.75</td>\n",
       "      <td>-0.97</td>\n",
       "      <td>-0.12</td>\n",
       "      <td>-0.48</td>\n",
       "      <td>-0.79</td>\n",
       "      <td>-0.51</td>\n",
       "      <td>-0.05</td>\n",
       "      <td>0.59</td>\n",
       "      <td>0.53</td>\n",
       "      <td>0.35</td>\n",
       "      <td>0.98</td>\n",
       "      <td>0.82</td>\n",
       "      <td>0.08</td>\n",
       "      <td>-0.33</td>\n",
       "      <td>-0.61</td>\n",
       "      <td>-0.34</td>\n",
       "      <td>-1.37</td>\n",
       "      <td>-1.52</td>\n",
       "      <td>-1.43</td>\n",
       "      <td>-1.68</td>\n",
       "      <td>-0.77</td>\n",
       "      <td>-0.73</td>\n",
       "      <td>-0.70</td>\n",
       "      <td>-0.74</td>\n",
       "      <td>0.50</td>\n",
       "      <td>-0.50</td>\n",
       "      <td>-0.45</td>\n",
       "      <td>-0.38</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.48</td>\n",
       "      <td>-1.03</td>\n",
       "      <td>0.95</td>\n",
       "      <td>-0.60</td>\n",
       "      <td>-0.49</td>\n",
       "      <td>0.73</td>\n",
       "      <td>-0.38</td>\n",
       "      <td>0.36</td>\n",
       "      <td>0.66</td>\n",
       "      <td>-0.43</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.03</td>\n",
       "      <td>-0.76</td>\n",
       "      <td>-0.35</td>\n",
       "      <td>-0.56</td>\n",
       "      <td>-0.53</td>\n",
       "      <td>-0.55</td>\n",
       "      <td>-0.30</td>\n",
       "      <td>-0.59</td>\n",
       "      <td>-0.78</td>\n",
       "      <td>-0.53</td>\n",
       "      <td>-1.06</td>\n",
       "      <td>-1.49</td>\n",
       "      <td>0.14</td>\n",
       "      <td>-0.29</td>\n",
       "      <td>-0.23</td>\n",
       "      <td>-0.63</td>\n",
       "      <td>1.18</td>\n",
       "      <td>1.07</td>\n",
       "      <td>0.97</td>\n",
       "      <td>0.90</td>\n",
       "      <td>0.13</td>\n",
       "      <td>-0.90</td>\n",
       "      <td>-0.66</td>\n",
       "      <td>-0.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>0.17</td>\n",
       "      <td>-0.06</td>\n",
       "      <td>-0.81</td>\n",
       "      <td>-0.86</td>\n",
       "      <td>-0.44</td>\n",
       "      <td>-0.52</td>\n",
       "      <td>-0.07</td>\n",
       "      <td>-0.03</td>\n",
       "      <td>0.59</td>\n",
       "      <td>0.33</td>\n",
       "      <td>0.88</td>\n",
       "      <td>-0.89</td>\n",
       "      <td>0.92</td>\n",
       "      <td>-0.64</td>\n",
       "      <td>-1.03</td>\n",
       "      <td>0.72</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0.57</td>\n",
       "      <td>0.44</td>\n",
       "      <td>0.58</td>\n",
       "      <td>2.41</td>\n",
       "      <td>0.55</td>\n",
       "      <td>-0.03</td>\n",
       "      <td>-0.36</td>\n",
       "      <td>-1.06</td>\n",
       "      <td>-1.01</td>\n",
       "      <td>-0.91</td>\n",
       "      <td>0.33</td>\n",
       "      <td>-1.50</td>\n",
       "      <td>1.26</td>\n",
       "      <td>-1.02</td>\n",
       "      <td>0.05</td>\n",
       "      <td>-0.66</td>\n",
       "      <td>0.80</td>\n",
       "      <td>-0.28</td>\n",
       "      <td>-0.54</td>\n",
       "      <td>-0.39</td>\n",
       "      <td>-0.35</td>\n",
       "      <td>-0.89</td>\n",
       "      <td>0.64</td>\n",
       "      <td>0.72</td>\n",
       "      <td>0.99</td>\n",
       "      <td>1.03</td>\n",
       "      <td>0.41</td>\n",
       "      <td>0.53</td>\n",
       "      <td>-0.24</td>\n",
       "      <td>-0.74</td>\n",
       "      <td>-0.23</td>\n",
       "      <td>-0.23</td>\n",
       "      <td>-0.33</td>\n",
       "      <td>-0.39</td>\n",
       "      <td>-0.30</td>\n",
       "      <td>-0.60</td>\n",
       "      <td>-0.60</td>\n",
       "      <td>-0.61</td>\n",
       "      <td>-0.61</td>\n",
       "      <td>0.64</td>\n",
       "      <td>-0.59</td>\n",
       "      <td>-0.95</td>\n",
       "      <td>-0.85</td>\n",
       "      <td>-0.72</td>\n",
       "      <td>-0.09</td>\n",
       "      <td>-1.29</td>\n",
       "      <td>0.29</td>\n",
       "      <td>-0.74</td>\n",
       "      <td>-0.09</td>\n",
       "      <td>0.73</td>\n",
       "      <td>-0.24</td>\n",
       "      <td>0.52</td>\n",
       "      <td>-0.10</td>\n",
       "      <td>-0.62</td>\n",
       "      <td>-1.66</td>\n",
       "      <td>0.67</td>\n",
       "      <td>-0.97</td>\n",
       "      <td>-0.55</td>\n",
       "      <td>-0.33</td>\n",
       "      <td>-0.36</td>\n",
       "      <td>-0.42</td>\n",
       "      <td>0.56</td>\n",
       "      <td>0.18</td>\n",
       "      <td>-0.09</td>\n",
       "      <td>0.07</td>\n",
       "      <td>-1.36</td>\n",
       "      <td>-0.69</td>\n",
       "      <td>-1.11</td>\n",
       "      <td>-0.29</td>\n",
       "      <td>-0.23</td>\n",
       "      <td>-0.67</td>\n",
       "      <td>1.13</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.55</td>\n",
       "      <td>0.13</td>\n",
       "      <td>-0.56</td>\n",
       "      <td>-0.36</td>\n",
       "      <td>-0.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>0.62</td>\n",
       "      <td>-0.22</td>\n",
       "      <td>1.93</td>\n",
       "      <td>0.23</td>\n",
       "      <td>0.53</td>\n",
       "      <td>0.14</td>\n",
       "      <td>-0.19</td>\n",
       "      <td>-0.11</td>\n",
       "      <td>0.68</td>\n",
       "      <td>-0.44</td>\n",
       "      <td>-0.15</td>\n",
       "      <td>0.24</td>\n",
       "      <td>-0.76</td>\n",
       "      <td>0.40</td>\n",
       "      <td>1.23</td>\n",
       "      <td>0.12</td>\n",
       "      <td>-0.63</td>\n",
       "      <td>-0.89</td>\n",
       "      <td>-0.58</td>\n",
       "      <td>-0.41</td>\n",
       "      <td>-0.26</td>\n",
       "      <td>-0.06</td>\n",
       "      <td>-0.85</td>\n",
       "      <td>-0.12</td>\n",
       "      <td>0.42</td>\n",
       "      <td>3.21</td>\n",
       "      <td>2.21</td>\n",
       "      <td>-1.01</td>\n",
       "      <td>1.91</td>\n",
       "      <td>-0.24</td>\n",
       "      <td>-0.18</td>\n",
       "      <td>-0.97</td>\n",
       "      <td>1.10</td>\n",
       "      <td>-1.35</td>\n",
       "      <td>-0.55</td>\n",
       "      <td>0.26</td>\n",
       "      <td>0.07</td>\n",
       "      <td>-0.19</td>\n",
       "      <td>2.67</td>\n",
       "      <td>-0.30</td>\n",
       "      <td>-0.44</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.56</td>\n",
       "      <td>0.41</td>\n",
       "      <td>-0.15</td>\n",
       "      <td>-0.15</td>\n",
       "      <td>0.52</td>\n",
       "      <td>0.46</td>\n",
       "      <td>0.41</td>\n",
       "      <td>0.66</td>\n",
       "      <td>0.60</td>\n",
       "      <td>0.58</td>\n",
       "      <td>3.47</td>\n",
       "      <td>3.46</td>\n",
       "      <td>3.44</td>\n",
       "      <td>3.39</td>\n",
       "      <td>-3.46</td>\n",
       "      <td>3.87</td>\n",
       "      <td>3.73</td>\n",
       "      <td>3.92</td>\n",
       "      <td>2.11</td>\n",
       "      <td>0.48</td>\n",
       "      <td>3.15</td>\n",
       "      <td>-1.64</td>\n",
       "      <td>3.88</td>\n",
       "      <td>1.88</td>\n",
       "      <td>-1.23</td>\n",
       "      <td>-0.38</td>\n",
       "      <td>0.57</td>\n",
       "      <td>-1.07</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.41</td>\n",
       "      <td>0.76</td>\n",
       "      <td>-0.27</td>\n",
       "      <td>1.68</td>\n",
       "      <td>0.91</td>\n",
       "      <td>0.94</td>\n",
       "      <td>0.90</td>\n",
       "      <td>0.52</td>\n",
       "      <td>0.75</td>\n",
       "      <td>0.79</td>\n",
       "      <td>0.73</td>\n",
       "      <td>1.36</td>\n",
       "      <td>2.03</td>\n",
       "      <td>-0.80</td>\n",
       "      <td>0.40</td>\n",
       "      <td>0.37</td>\n",
       "      <td>3.39</td>\n",
       "      <td>-0.73</td>\n",
       "      <td>-0.69</td>\n",
       "      <td>0.47</td>\n",
       "      <td>0.40</td>\n",
       "      <td>-0.50</td>\n",
       "      <td>1.02</td>\n",
       "      <td>-0.23</td>\n",
       "      <td>-0.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>0.03</td>\n",
       "      <td>-0.45</td>\n",
       "      <td>-0.45</td>\n",
       "      <td>-0.80</td>\n",
       "      <td>-1.21</td>\n",
       "      <td>-0.94</td>\n",
       "      <td>1.10</td>\n",
       "      <td>-0.50</td>\n",
       "      <td>-1.57</td>\n",
       "      <td>-0.44</td>\n",
       "      <td>-0.70</td>\n",
       "      <td>-0.89</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.51</td>\n",
       "      <td>-0.13</td>\n",
       "      <td>0.78</td>\n",
       "      <td>-0.48</td>\n",
       "      <td>-0.47</td>\n",
       "      <td>-0.69</td>\n",
       "      <td>0.28</td>\n",
       "      <td>-0.32</td>\n",
       "      <td>3.11</td>\n",
       "      <td>3.35</td>\n",
       "      <td>-0.36</td>\n",
       "      <td>-0.49</td>\n",
       "      <td>-0.12</td>\n",
       "      <td>-0.07</td>\n",
       "      <td>-0.73</td>\n",
       "      <td>0.28</td>\n",
       "      <td>-0.93</td>\n",
       "      <td>1.01</td>\n",
       "      <td>-0.00</td>\n",
       "      <td>0.80</td>\n",
       "      <td>-0.22</td>\n",
       "      <td>-0.34</td>\n",
       "      <td>-1.28</td>\n",
       "      <td>-0.39</td>\n",
       "      <td>-0.35</td>\n",
       "      <td>-0.76</td>\n",
       "      <td>0.44</td>\n",
       "      <td>0.53</td>\n",
       "      <td>0.76</td>\n",
       "      <td>1.19</td>\n",
       "      <td>-0.13</td>\n",
       "      <td>-0.15</td>\n",
       "      <td>-0.33</td>\n",
       "      <td>-0.91</td>\n",
       "      <td>-0.34</td>\n",
       "      <td>-1.46</td>\n",
       "      <td>-1.71</td>\n",
       "      <td>-1.98</td>\n",
       "      <td>-2.19</td>\n",
       "      <td>-0.77</td>\n",
       "      <td>-0.77</td>\n",
       "      <td>-0.78</td>\n",
       "      <td>-0.78</td>\n",
       "      <td>0.81</td>\n",
       "      <td>-0.64</td>\n",
       "      <td>-0.75</td>\n",
       "      <td>-0.69</td>\n",
       "      <td>-0.54</td>\n",
       "      <td>-0.60</td>\n",
       "      <td>-0.55</td>\n",
       "      <td>0.75</td>\n",
       "      <td>-0.74</td>\n",
       "      <td>-0.55</td>\n",
       "      <td>0.73</td>\n",
       "      <td>-0.44</td>\n",
       "      <td>0.67</td>\n",
       "      <td>0.76</td>\n",
       "      <td>-0.25</td>\n",
       "      <td>-0.07</td>\n",
       "      <td>-1.22</td>\n",
       "      <td>0.06</td>\n",
       "      <td>-0.01</td>\n",
       "      <td>-0.78</td>\n",
       "      <td>-0.75</td>\n",
       "      <td>-0.76</td>\n",
       "      <td>-0.76</td>\n",
       "      <td>-0.92</td>\n",
       "      <td>-0.86</td>\n",
       "      <td>-1.00</td>\n",
       "      <td>-0.94</td>\n",
       "      <td>-1.07</td>\n",
       "      <td>-1.11</td>\n",
       "      <td>-0.29</td>\n",
       "      <td>-0.23</td>\n",
       "      <td>-0.72</td>\n",
       "      <td>1.42</td>\n",
       "      <td>0.85</td>\n",
       "      <td>1.21</td>\n",
       "      <td>1.10</td>\n",
       "      <td>-0.50</td>\n",
       "      <td>-0.16</td>\n",
       "      <td>-0.62</td>\n",
       "      <td>-0.39</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 96 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    ViolentCrimesPerPop  population  householdsize  agePct12t21  agePct12t29  \\\n",
       "0                  0.67       -0.45          -1.85        -1.06         0.67   \n",
       "1                  0.43       -0.45          -0.27        -0.22        -0.17   \n",
       "2                  0.12       -0.14           1.87         0.55         0.04   \n",
       "3                  0.03       -0.38           0.53        -0.28        -0.79   \n",
       "4                  0.14       -0.30          -1.12        -0.74        -0.10   \n",
       "..                  ...         ...            ...          ...          ...   \n",
       "95                 0.17       -0.30          -0.08         1.65         1.02   \n",
       "96                 0.17       -0.38          -0.08         0.10        -0.31   \n",
       "97                 0.17       -0.06          -0.81        -0.86        -0.44   \n",
       "98                 0.62       -0.22           1.93         0.23         0.53   \n",
       "99                 0.03       -0.45          -0.45        -0.80        -1.21   \n",
       "\n",
       "    agePct16t24  agePct65up  numbUrban  pctUrban  medIncome  pctWWage  \\\n",
       "0          0.08       -0.85      -0.34      0.68      -0.24      0.88   \n",
       "1         -0.34       -0.58      -0.50     -1.57      -0.29      0.12   \n",
       "2          0.02       -1.19      -0.03      0.68       1.05      1.81   \n",
       "3         -0.64       -0.35      -0.34      0.46       0.66      0.88   \n",
       "4         -0.40       -0.30      -0.19      0.68       0.76      0.67   \n",
       "..          ...         ...        ...       ...        ...       ...   \n",
       "95         1.64        0.15      -0.50     -1.57      -0.20      0.12   \n",
       "96        -0.16        0.32      -0.27      0.68       0.09     -0.43   \n",
       "97        -0.52       -0.07      -0.03      0.59       0.33      0.88   \n",
       "98         0.14       -0.19      -0.11      0.68      -0.44     -0.15   \n",
       "99        -0.94        1.10      -0.50     -1.57      -0.44     -0.70   \n",
       "\n",
       "    pctWFarmSelf  pctWInvInc  pctWSocSec  pctWPubAsst  pctWRetire  medFamInc  \\\n",
       "0          -0.89       -0.26       -1.27        -0.13       -0.53      -0.43   \n",
       "1          -0.50       -0.59       -0.52         0.37        2.15      -0.48   \n",
       "2          -0.40       -0.37       -0.64        -0.53        2.03       0.68   \n",
       "3          -0.64        1.04       -0.18        -0.94        1.38       0.43   \n",
       "4          -0.45        0.64       -1.10        -0.76       -1.37       1.23   \n",
       "..           ...         ...         ...          ...         ...        ...   \n",
       "95          0.09        0.64        0.22        -0.49        0.06      -0.08   \n",
       "96          0.09       -0.03        0.22        -0.08        1.32       0.02   \n",
       "97         -0.89        0.92       -0.64        -1.03        0.72       0.27   \n",
       "98          0.24       -0.76        0.40         1.23        0.12      -0.63   \n",
       "99         -0.89        0.14        0.51        -0.13        0.78      -0.48   \n",
       "\n",
       "    perCapInc  whitePerCap  blackPerCap  indianPerCap  AsianPerCap  \\\n",
       "0        0.10         0.06         0.23         -0.26        -0.11   \n",
       "1       -0.42        -0.42        -0.12         -0.81        -0.17   \n",
       "2        0.05         0.17         0.58         -0.26        -0.37   \n",
       "3        0.42         0.22        -0.06         -1.24         2.14   \n",
       "4        1.93         2.10         2.79          0.46         1.01   \n",
       "..        ...          ...          ...           ...          ...   \n",
       "95      -0.21        -0.36        -1.46         -0.69        -0.17   \n",
       "96      -0.16        -0.36        -0.18          0.83         2.55   \n",
       "97       0.57         0.44         0.58          2.41         0.55   \n",
       "98      -0.89        -0.58        -0.41         -0.26        -0.06   \n",
       "99      -0.47        -0.69         0.28         -0.32         3.11   \n",
       "\n",
       "    HispPerCap  NumUnderPov  PctPopUnderPov  PctLess9thGrade  PctNotHSGrad  \\\n",
       "0        -0.20        -0.36           -0.28            -0.82         -0.71   \n",
       "1         0.02        -0.36           -0.14            -0.21          0.23   \n",
       "2         0.29        -0.36           -0.89            -1.06         -0.66   \n",
       "3         0.51        -0.43           -1.06            -0.31         -0.41   \n",
       "4         1.17        -0.36           -0.80            -0.87         -1.30   \n",
       "..         ...          ...             ...              ...           ...   \n",
       "95       -0.31        -0.36           -0.45            -0.50         -0.56   \n",
       "96        0.02        -0.36           -0.49            -0.17          0.13   \n",
       "97       -0.03        -0.36           -1.06            -1.01         -0.91   \n",
       "98       -0.85        -0.12            0.42             3.21          2.21   \n",
       "99        3.35        -0.36           -0.49            -0.12         -0.07   \n",
       "\n",
       "    PctBSorMore  PctUnemployed  PctEmploy  PctEmplManu  PctEmplProfServ  \\\n",
       "0         -0.29          -0.46       1.32         0.86            -1.66   \n",
       "1         -0.82          -0.02       0.45        -0.38            -0.86   \n",
       "2         -0.25          -0.17       1.20        -0.18             0.05   \n",
       "3         -0.15          -1.20       0.86         1.35            -0.35   \n",
       "4          2.10          -1.30       0.86        -1.02             1.88   \n",
       "..          ...            ...        ...          ...              ...   \n",
       "95         0.47           0.18       0.28         0.26             0.40   \n",
       "96        -0.96           0.23      -0.35         0.31            -0.06   \n",
       "97         0.33          -1.50       1.26        -1.02             0.05   \n",
       "98        -1.01           1.91      -0.24        -0.18            -0.97   \n",
       "99        -0.73           0.28      -0.93         1.01            -0.00   \n",
       "\n",
       "    PctOccupManu  PctOccupMgmtProf  MalePctDivorce  MalePctNevMarr  \\\n",
       "0           0.14             -0.44            2.95            1.11   \n",
       "1           0.50             -0.65            0.92           -0.14   \n",
       "2          -0.11             -0.28           -0.66            0.09   \n",
       "3           0.14              0.10           -1.32           -0.94   \n",
       "4          -1.67              2.52            0.16            0.77   \n",
       "..           ...               ...             ...             ...   \n",
       "95         -0.01             -0.01           -0.23            0.66   \n",
       "96          0.75             -0.97           -0.12           -0.48   \n",
       "97         -0.66              0.80           -0.28           -0.54   \n",
       "98          1.10             -1.35           -0.55            0.26   \n",
       "99          0.80             -0.22           -0.34           -1.28   \n",
       "\n",
       "    FemalePctDiv  TotalPctDiv  PersPerFam  PctFam2Par  PctKids2Par  \\\n",
       "0           2.41         2.75       -1.28       -0.90        -0.73   \n",
       "1           1.27         1.12       -0.24       -0.95        -0.88   \n",
       "2           0.01        -0.30        1.70        0.19        -0.39   \n",
       "3          -1.64        -1.55        0.14        1.48         1.40   \n",
       "4           0.70         0.47       -0.31        0.04         0.34   \n",
       "..           ...          ...         ...         ...          ...   \n",
       "95         -0.16        -0.13       -0.70        0.04         0.24   \n",
       "96         -0.79        -0.51       -0.05        0.59         0.53   \n",
       "97         -0.39        -0.35       -0.89        0.64         0.72   \n",
       "98          0.07        -0.19        2.67       -0.30        -0.44   \n",
       "99         -0.39        -0.35       -0.76        0.44         0.53   \n",
       "\n",
       "    PctYoungKids2Par  PctTeen2Par  PctWorkMomYoungKids  PctWorkMom  NumIlleg  \\\n",
       "0              -0.29        -1.01                -0.25        0.02     -0.33   \n",
       "1              -1.07        -0.80                 1.24        0.82     -0.24   \n",
       "2               0.76         0.35                 2.07        1.90     -0.06   \n",
       "3               1.03         1.39                -0.60        0.42     -0.33   \n",
       "4               0.94        -0.28                -1.19       -0.55     -0.33   \n",
       "..               ...          ...                  ...         ...       ...   \n",
       "95             -0.06         0.72                 0.76        1.05     -0.24   \n",
       "96              0.35         0.98                 0.82        0.08     -0.33   \n",
       "97              0.99         1.03                 0.41        0.53     -0.24   \n",
       "98              0.07         0.56                 0.41       -0.15     -0.15   \n",
       "99              0.76         1.19                -0.13       -0.15     -0.33   \n",
       "\n",
       "    PctIlleg  NumImmig  PctImmigRecent  PctImmigRec5  PctImmigRec8  \\\n",
       "0      -0.04     -0.23            0.91          1.23          1.20   \n",
       "1       0.91     -0.34           -1.14         -1.43         -1.24   \n",
       "2       0.35     -0.12           -0.96         -0.76         -0.49   \n",
       "3      -0.83     -0.34           -1.32         -1.38         -0.99   \n",
       "4      -0.61      0.11           -0.09         -0.05          0.15   \n",
       "..       ...       ...             ...           ...           ...   \n",
       "95     -0.48     -0.34           -0.69          0.04         -0.09   \n",
       "96     -0.61     -0.34           -1.37         -1.52         -1.43   \n",
       "97     -0.74     -0.23           -0.23         -0.33         -0.39   \n",
       "98      0.52      0.46            0.41          0.66          0.60   \n",
       "99     -0.91     -0.34           -1.46         -1.71         -1.98   \n",
       "\n",
       "    PctImmigRec10  PctRecentImmig  PctRecImmig5  PctRecImmig8  PctRecImmig10  \\\n",
       "0            1.04            0.29          0.37          0.28           0.20   \n",
       "1           -1.22           -0.68         -0.69         -0.61          -0.57   \n",
       "2           -0.60           -0.56         -0.43         -0.32          -0.31   \n",
       "3           -0.81           -0.73         -0.69         -0.61          -0.57   \n",
       "4            0.22            1.35          1.35          1.58           1.65   \n",
       "..            ...             ...           ...           ...            ...   \n",
       "95          -0.30           -0.64         -0.52         -0.53          -0.57   \n",
       "96          -1.68           -0.77         -0.73         -0.70          -0.74   \n",
       "97          -0.30           -0.60         -0.60         -0.61          -0.61   \n",
       "98           0.58            3.47          3.46          3.44           3.39   \n",
       "99          -2.19           -0.77         -0.77         -0.78          -0.78   \n",
       "\n",
       "    PctSpeakEnglOnly  PctNotSpeakEnglWell  PctLargHouseFam  PctLargHouseOccup  \\\n",
       "0               0.24                -0.23            -0.55              -0.80   \n",
       "1               0.41                -0.50            -0.34              -0.27   \n",
       "2               0.11                -0.32             1.49               1.93   \n",
       "3               0.41                -0.46            -0.55              -0.32   \n",
       "4              -1.48                 0.59            -0.09              -0.32   \n",
       "..               ...                  ...              ...                ...   \n",
       "95              0.64                -0.55            -0.75              -0.74   \n",
       "96              0.50                -0.50            -0.45              -0.38   \n",
       "97              0.64                -0.59            -0.95              -0.85   \n",
       "98             -3.46                 3.87             3.73               3.92   \n",
       "99              0.81                -0.64            -0.75              -0.69   \n",
       "\n",
       "    PersPerOccupHous  PersPerOwnOccHous  PersPerRentOccHous  PctPersOwnOccup  \\\n",
       "0              -1.72              -1.29               -1.24            -1.54   \n",
       "1              -0.01               0.16                0.14            -0.72   \n",
       "2               2.29               1.74                3.15             1.91   \n",
       "3               0.75               0.67               -0.18             1.66   \n",
       "4              -1.02               0.23               -1.18            -0.88   \n",
       "..               ...                ...                 ...              ...   \n",
       "95             -0.60              -0.22               -0.81            -0.11   \n",
       "96              0.05               0.48               -1.03             0.95   \n",
       "97             -0.72              -0.09               -1.29             0.29   \n",
       "98              2.11               0.48                3.15            -1.64   \n",
       "99             -0.54              -0.60               -0.55             0.75   \n",
       "\n",
       "    PctPersDenseHous  PctHousLess3BR  MedNumBR  HousVacant  PctHousOccup  \\\n",
       "0               0.07            1.88     -1.23       -0.38          0.36   \n",
       "1              -0.17            0.09      0.73       -0.44          0.72   \n",
       "2              -0.32           -2.81      0.73       -0.44          1.29   \n",
       "3              -0.79           -1.77      0.73       -0.44          0.88   \n",
       "4               0.35            1.36     -1.23       -0.38          0.62   \n",
       "..               ...             ...       ...         ...           ...   \n",
       "95             -0.60            0.20      0.73       -0.38          0.47   \n",
       "96             -0.60           -0.49      0.73       -0.38          0.36   \n",
       "97             -0.74           -0.09      0.73       -0.24          0.52   \n",
       "98              3.88            1.88     -1.23       -0.38          0.57   \n",
       "99             -0.74           -0.55      0.73       -0.44          0.67   \n",
       "\n",
       "    PctHousOwnOcc  PctVacantBoarded  PctVacMore6Mos  MedYrHousBuilt  \\\n",
       "0           -1.67             -0.85           -0.97            0.67   \n",
       "1           -0.75              0.39           -0.71            0.11   \n",
       "2            2.22              1.82            0.19            0.11   \n",
       "3            1.73             -0.76            0.62            1.01   \n",
       "4           -1.34             -0.20           -0.81           -1.05   \n",
       "..            ...               ...             ...             ...   \n",
       "95          -0.32             -0.80           -0.65           -0.79   \n",
       "96           0.66             -0.43            0.04            0.03   \n",
       "97          -0.10             -0.62           -1.66            0.67   \n",
       "98          -1.07              0.25            0.41            0.76   \n",
       "99           0.76             -0.25           -0.07           -1.22   \n",
       "\n",
       "    PctHousNoPhone  PctWOFullPlumb  OwnOccLowQuart  OwnOccMedVal  \\\n",
       "0            -0.43           -1.18           -0.24         -0.27   \n",
       "1             0.85            1.00           -0.38         -0.40   \n",
       "2            -0.64           -0.64           -0.11         -0.23   \n",
       "3            -0.88           -0.50            0.20          0.20   \n",
       "4            -1.01           -0.94            3.01          3.18   \n",
       "..             ...             ...             ...           ...   \n",
       "95            0.02           -0.26            0.02         -0.02   \n",
       "96           -0.76           -0.35           -0.56         -0.53   \n",
       "97           -0.97           -0.55           -0.33         -0.36   \n",
       "98           -0.27            1.68            0.91          0.94   \n",
       "99            0.06           -0.01           -0.78         -0.75   \n",
       "\n",
       "    OwnOccHiQuart  RentLowQ  RentMedian  RentHighQ  MedRent  \\\n",
       "0           -0.25      0.34        0.04      -0.09    -0.07   \n",
       "1           -0.46     -0.35       -0.39      -0.62    -0.35   \n",
       "2           -0.34      1.84        1.57       1.40     2.37   \n",
       "3            0.13      0.24       -0.06      -0.17    -0.02   \n",
       "4            3.11      1.48        1.23       1.04     1.11   \n",
       "..            ...       ...         ...        ...      ...   \n",
       "95          -0.04      0.11        0.32       0.31     0.22   \n",
       "96          -0.55     -0.30       -0.59      -0.78    -0.53   \n",
       "97          -0.42      0.56        0.18      -0.09     0.07   \n",
       "98           0.90      0.52        0.75       0.79     0.73   \n",
       "99          -0.76     -0.76       -0.92      -0.86    -1.00   \n",
       "\n",
       "    MedRentPctHousInc  MedOwnCostPctInc  MedOwnCostPctIncNoMtg  NumInShelters  \\\n",
       "0               -1.18             -0.69                  -1.16          -0.29   \n",
       "1               -0.06             -0.32                  -0.64          -0.29   \n",
       "2                0.83              0.32                   0.34          -0.29   \n",
       "3               -1.59              0.32                  -1.01          -0.29   \n",
       "4               -0.12              0.75                  -1.53          -0.29   \n",
       "..                ...               ...                    ...            ...   \n",
       "95               1.18              0.86                   1.80          -0.29   \n",
       "96              -1.06             -1.49                   0.14          -0.29   \n",
       "97              -1.36             -0.69                  -1.11          -0.29   \n",
       "98               1.36              2.03                  -0.80           0.40   \n",
       "99              -0.94             -1.07                  -1.11          -0.29   \n",
       "\n",
       "    NumStreet  PctForeignBorn  PctBornSameState  PctSameHouse85  \\\n",
       "0       -0.23           -0.02             -0.53           -1.08   \n",
       "1       -0.23           -0.33             -0.58            0.03   \n",
       "2       -0.23           -0.11             -1.51            1.07   \n",
       "3       -0.23           -0.46              0.54            0.58   \n",
       "4       -0.23            2.10             -0.92           -0.25   \n",
       "..        ...             ...               ...             ...   \n",
       "95      -0.23           -0.63             -0.73           -0.41   \n",
       "96      -0.23           -0.63              1.18            1.07   \n",
       "97      -0.23           -0.67              1.13            0.19   \n",
       "98       0.37            3.39             -0.73           -0.69   \n",
       "99      -0.23           -0.72              1.42            0.85   \n",
       "\n",
       "    PctSameCity85  PctSameState85  LandArea  PopDens  PctUsePubTrans  \\\n",
       "0           -0.13           -0.66     -0.41    -0.56            1.26   \n",
       "1            0.22           -0.46     -0.50    -0.11           -0.62   \n",
       "2            0.07           -0.01     -0.41     0.77            0.52   \n",
       "3           -0.08           -0.61     -0.23    -0.70           -0.62   \n",
       "4            0.52           -0.06     -0.50     1.71           -0.27   \n",
       "..            ...             ...       ...      ...             ...   \n",
       "95          -0.53           -1.22      0.41    -0.90           -0.71   \n",
       "96           0.97            0.90      0.13    -0.90           -0.66   \n",
       "97           0.07            0.55      0.13    -0.56           -0.36   \n",
       "98           0.47            0.40     -0.50     1.02           -0.23   \n",
       "99           1.21            1.10     -0.50    -0.16           -0.62   \n",
       "\n",
       "    LemasPctOfficDrugUn  \n",
       "0                 -0.39  \n",
       "1                 -0.39  \n",
       "2                 -0.39  \n",
       "3                 -0.39  \n",
       "4                 -0.39  \n",
       "..                  ...  \n",
       "95                -0.39  \n",
       "96                -0.39  \n",
       "97                -0.39  \n",
       "98                -0.39  \n",
       "99                -0.39  \n",
       "\n",
       "[100 rows x 96 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.head(100)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8836b45d-f4ee-43c7-becb-d4c356948c5c",
   "metadata": {},
   "source": [
    "Train set is 1595 rows and the test set is 399. We have a total of 96 features including the target variable of Per Capita Violent Crime."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f1c6baf5-f99d-4e31-85a8-9b2d0764d04e",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train = df_train.drop('ViolentCrimesPerPop', axis = 1).copy()\n",
    "y_train = df_train['ViolentCrimesPerPop']\n",
    "\n",
    "\n",
    "def calc_lambda(X_train,\n",
    "                y_train,\n",
    "                factor = 2):\n",
    "    '''\n",
    "    Args:\n",
    "        X (np.ndarray): An (n x d) matrix, with n observations each with d features.\n",
    "        y (np.ndarray): An (n, ) array, with n observations of targets.\n",
    "    \n",
    "    Returns:\n",
    "    lambda_range (list): A list ranging from the maximum lambda (resulting in all 0\n",
    "    vector for weights) to lambda >0.1. Each step is by the given factor.\n",
    "    '''\n",
    "    lambda_max = np.max(2*np.abs(X_train.T@(y_train - (1/X_train.shape[0]*np.sum(y_train)))))\n",
    "    lambda_range = []\n",
    "    while lambda_max >= 0.01:\n",
    "        lambda_range.append(lambda_max)\n",
    "        lambda_max = lambda_max/factor\n",
    "    return lambda_range\n",
    "\n",
    "lambda_range = calc_lambda(X_train,y_train, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "971a1e22-ea5b-44b0-9c03-ae82f3eb0065",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def zeros_plot(X,\n",
    "               y,\n",
    "               lambda_range,\n",
    "               bias: float = 0,\n",
    "               learning_rate: float = 0.00001):\n",
    "    '''\n",
    "    Args:\n",
    "        X (np.ndarray): An (n x d) matrix, with n observations each with d features.\n",
    "        y (np.ndarray): An (n, ) array, with n observations of targets.\n",
    "        lambda_range (iterable): An iterable with the possible values of lambda\n",
    "        bias: some initial bias.\n",
    "        learning_rate: learning rate for the ISTA algorithm.\n",
    "    '''\n",
    "    \n",
    "    zeros = [] #capture zeros in weight vector here\n",
    "    weights = np.c_[np.zeros(X.shape[1])] #initialize weight as 0 \n",
    "    for reg_lambda in lambda_range:\n",
    "        w_hat, b_hat = train(X,y, start_weight = weights[:,-1], _lambda = reg_lambda, eta = learning_rate, convergence_delta = 0.001)\n",
    "        weights = np.c_[weights,w_hat] #capture new weight and append to end of weight array\n",
    "        zeros.append(sum((w_hat == 0))) #record number of zeros.\n",
    "\n",
    "    plt.title(\"Regression Coefficients Vs. Regularization Value ($\\lambda$)\")\n",
    "    plt.plot(lambda_range, zeros)\n",
    "    plt.xscale('log')\n",
    "    plt.xlabel('$\\lambda$')\n",
    "    plt.ylabel('Number of Zeros in Weight vector')\n",
    "    plt.show()\n",
    "    \n",
    "zeros_plot(X_train, y_train, lambda_range, bias = 1, learning_rate = 0.00001)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "87575e13-b503-4766-881c-c5fb04dd28b6",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "def reg_path(X,\n",
    "             y,\n",
    "             features: list,\n",
    "             lambda_range,\n",
    "             bias: float = 0,\n",
    "             learning_rate: float = 0.000001\n",
    "            ):\n",
    "    \n",
    "    #Convert the features to the index values\n",
    "    query_feats = features\n",
    "    feat_index = [X.columns.get_loc(col) for col in query_feats]\n",
    "    \n",
    "    #Add lambda to the list so we can make a dataframe\n",
    "    cols = query_feats.insert(0, \"Lambda\")\n",
    "    \n",
    "    #Set weights to 0\n",
    "    weights = np.c_[np.zeros(X.shape[1])]\n",
    "    \n",
    "    #Create a dataframe to capture the weights by feature w/ labels\n",
    "    feat_weights =pd.DataFrame(columns = query_feats)\n",
    "    \n",
    "    for reg_lambda in lambda_range:\n",
    "        #train the model and capture weights\n",
    "        w_hat, b_hat = train(X,y, start_weight = weights[:,-1], _lambda = reg_lambda, start_bias = bias, eta = learning_rate, convergence_delta = 0.001)\n",
    "        #append the weights to the dataframe\n",
    "        temp = np.insert(w_hat[feat_index],0,reg_lambda)\n",
    "        feat_weights.loc[len(feat_weights.index)] = temp\n",
    "        #capture new weight and append to end of weight array\n",
    "        weights = np.c_[weights,w_hat]\n",
    "        \n",
    "    #don't wanna loop to make plots so here's seaborn i guess.\n",
    "    stacked_df = pd.melt(feat_weights,['Lambda'])\n",
    "    sns.lineplot(data = stacked_df, x='Lambda', y = 'value', hue = 'variable')\n",
    "    plt.xscale('log')\n",
    "    plt.xlabel('$\\lambda$')\n",
    "    plt.ylabel('feature weight')\n",
    "    plt.title('Feature Weight vs $\\lambda$')\n",
    "    return(feat_weights)\n",
    "\n",
    "    \n",
    "    \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "9b254127-32c4-4888-9747-e7a2eef2b739",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "test_feats = ['agePct12t29','pctWSocSec',\n",
    "                         'pctUrban', 'agePct65up','householdsize']\n",
    "temp = reg_path(X_train,y_train, features = test_feats, lambda_range = lambda_range, learning_rate = 0.00001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "4ce198c1-36c7-4de1-88df-b7176f84ac19",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def mean_squared_error(a: np.ndarray, b: np.ndarray) -> float:\n",
    "    \"\"\"Given two arrays: a and b, both of shape (n, 1) calculate a mean squared error.\n",
    "\n",
    "    Args:\n",
    "        a (np.ndarray): Array of shape (n, 1)\n",
    "        b (np.ndarray): Array of shape (n, 1)\n",
    "\n",
    "    Returns:\n",
    "        float: mean squared error between a and b.\n",
    "    \"\"\"\n",
    "    mse = np.sum((a-b)**2/len(a))\n",
    "    return(mse)\n",
    "\n",
    "#wrote this for hw1\n",
    "def ValCurveLasso(X_train: np.ndarray,\n",
    "                    y_train: np.ndarray,\n",
    "                    X_test: np.ndarray,\n",
    "                    y_test: np.ndarray,\n",
    "                    param_range: list,\n",
    "                    bias: float = 0,\n",
    "                    learning_rate: float = 0.000001\n",
    "                    ):\n",
    "    \"\"\" Compute a validation curve\n",
    "    Args: \n",
    "        X: data capable of being fed into model\n",
    "        y: target variable capable of being predicted by model\n",
    "        param_range: list of range for parameter of interest in this case lambda\n",
    "        \n",
    "        start_weight: start weight\n",
    "        start_bias: starting bias\n",
    "        learning_rate: learning rate for lass\n",
    "        \n",
    "    Returns:\n",
    "        Nothing, but outputs a nice plot\n",
    "    \"\"\"\n",
    "    \n",
    "    train_scores = []\n",
    "    test_scores = []\n",
    "    \n",
    "    #Set weights to 0\n",
    "    weights = np.c_[np.zeros(X_train.shape[1])]\n",
    "    \n",
    "    \n",
    "    for param in param_range:\n",
    "        #train the model and capture weights\n",
    "        w_hat, b_hat = train(X_train,y_train, start_weight = weights[:,-1], _lambda = param, start_bias = bias, eta = learning_rate, convergence_delta = 0.001)\n",
    "        #capture new weight and append to end of weight array\n",
    "        weights = np.c_[weights,w_hat]\n",
    "        #fit model w/ param\n",
    "        \n",
    "        #get predictions\n",
    "        train_preds = b_hat + (X_train @ w_hat)\n",
    "        test_preds = b_hat + (X_test @ w_hat)\n",
    "        #get errors.\n",
    "        \n",
    "            \n",
    "        train_score = mean_squared_error(train_preds, y_train)\n",
    "        test_score = mean_squared_error(test_preds, y_test)\n",
    "        train_scores.append(train_score)\n",
    "        test_scores.append(test_score)\n",
    "        print(\"Scores for parameter = {} calculated \\n train score: {:.5} \\n test score: {:.5}\".format(param, train_score, test_score))\n",
    "    \n",
    "    plt.plot(param_range, train_scores, color='blue', marker='o', markersize=5, label='training accuracy')\n",
    "    plt.plot(param_range, test_scores, color='green', linestyle='--', marker='s', markersize=5, label='test accuracy')\n",
    "    \n",
    "    plt.grid()\n",
    "    plt.xscale('log')\n",
    "    plt.legend(loc='lower right')\n",
    "    plt.xlabel('Parameter C')\n",
    "    plt.ylabel('MSE')\n",
    "    plt.show()    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "64cc72a9-3303-4d99-89d9-6a72584d4597",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Scores for parameter = 541.4826026332289 calculated \n",
      " train score: 0.054033 \n",
      " test score: 0.059456\n",
      "Scores for parameter = 270.74130131661445 calculated \n",
      " train score: 0.054033 \n",
      " test score: 0.059456\n",
      "Scores for parameter = 135.37065065830723 calculated \n",
      " train score: 0.031784 \n",
      " test score: 0.034364\n",
      "Scores for parameter = 67.68532532915361 calculated \n",
      " train score: 0.024085 \n",
      " test score: 0.025886\n",
      "Scores for parameter = 33.84266266457681 calculated \n",
      " train score: 0.021149 \n",
      " test score: 0.023146\n",
      "Scores for parameter = 16.921331332288403 calculated \n",
      " train score: 0.01979 \n",
      " test score: 0.022301\n",
      "Scores for parameter = 8.460665666144202 calculated \n",
      " train score: 0.019169 \n",
      " test score: 0.022047\n",
      "Scores for parameter = 4.230332833072101 calculated \n",
      " train score: 0.018823 \n",
      " test score: 0.022043\n",
      "Scores for parameter = 2.1151664165360504 calculated \n",
      " train score: 0.018505 \n",
      " test score: 0.022084\n",
      "Scores for parameter = 1.0575832082680252 calculated \n",
      " train score: 0.018277 \n",
      " test score: 0.022232\n",
      "Scores for parameter = 0.5287916041340126 calculated \n",
      " train score: 0.018117 \n",
      " test score: 0.02239\n",
      "Scores for parameter = 0.2643958020670063 calculated \n",
      " train score: 0.018012 \n",
      " test score: 0.02255\n",
      "Scores for parameter = 0.13219790103350315 calculated \n",
      " train score: 0.017944 \n",
      " test score: 0.022694\n",
      "Scores for parameter = 0.06609895051675158 calculated \n",
      " train score: 0.017899 \n",
      " test score: 0.02282\n",
      "Scores for parameter = 0.03304947525837579 calculated \n",
      " train score: 0.017869 \n",
      " test score: 0.022929\n",
      "Scores for parameter = 0.016524737629187894 calculated \n",
      " train score: 0.017848 \n",
      " test score: 0.023023\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "X_test = df_test.drop('ViolentCrimesPerPop', axis = 1).copy()\n",
    "y_test = df_test['ViolentCrimesPerPop']\n",
    "\n",
    "ValCurveLasso(X_train, y_train, X_test, y_test, lambda_range,bias = 1, learning_rate = 0.00001 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "0939fd3d-7fc9-48a1-8d32-b77ce319ffb2",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# def predict(X: np.ndarray,\n",
    "#             y: np.ndarray,\n",
    "#             _lambda: float,\n",
    "#             bias: float = 0,\n",
    "#             learning_rate: float = 0.00001\n",
    "#             ):\n",
    "#     \"\"\" Compute a validation curve\n",
    "#     Args: \n",
    "#         X: data capable of being fed into model\n",
    "#         y: target variable capable of being predicted by model\n",
    "#         param_range: list of range for parameter of interest in this case lambda\n",
    "        \n",
    "#         start_weight: start weight\n",
    "#         start_bias: starting bias\n",
    "#         learning_rate: learning rate for lass\n",
    "        \n",
    "#     Returns:\n",
    "#         Nothing, but outputs a nice plot\n",
    "#     \"\"\"\n",
    "    \n",
    "#     train_scores = []\n",
    "#     test_scores = []\n",
    "    \n",
    "#     #Set weights to 0\n",
    "#     weights = np.c_[np.zeros(X_train.shape[1])]\n",
    "#     w_hat, b_hat = train(X,y, start_weight = weights[:,-1], _lambda = _lambda, start_bias = bias, eta = learning_rate)\n",
    "#     #capture new weight and append to end of weight array\n",
    "#     weights = np.c_[weights,w_hat]\n",
    "#     #fit model w/ param\n",
    "#     train_preds = b_hat + (X@ w_hat)\n",
    "#     return(train_preds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "c5404f30-078b-4b4f-950b-1b4506f69781",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_weights_30(X,\n",
    "               y,\n",
    "               _lambda: float = 30,\n",
    "               bias: float = 0,\n",
    "               learning_rate: float = 0.00001):\n",
    "    '''\n",
    "    Args:\n",
    "        X (np.ndarray): An (n x d) matrix, with n observations each with d features.\n",
    "        y (np.ndarray): An (n, ) array, with n observations of targets.\n",
    "        lambda_range (iterable): An iterable with the possible values of lambda\n",
    "        bias: some initial bias.\n",
    "        learning_rate: learning rate for the ISTA algorithm.\n",
    "    '''\n",
    "    weights = np.c_[np.zeros(X.shape[1])] #initialize weight as 0 \n",
    "    w_hat, b_hat = train(X,y, start_weight = weights[:,-1], _lambda = _lambda, eta = learning_rate, convergence_delta = 0.001)\n",
    "    return(w_hat,b_hat)\n",
    "    \n",
    "w_30, b_30 = get_weights_30(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "b2e987bd-369d-4cec-af27-e8ea70545b9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "weights_dict = {}\n",
    "\n",
    "weights_dict['bias'] = b_30\n",
    "i = 0\n",
    "for weight in X_train.columns:\n",
    "    weights_dict[weight] = w_30[i]\n",
    "    i+=1\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "c4d54ab3-3505-436c-91fd-77e4e86c1498",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Values</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>bias</th>\n",
       "      <td>0.205579</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PctIlleg</th>\n",
       "      <td>0.042592</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PctPersDenseHous</th>\n",
       "      <td>0.015418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HousVacant</th>\n",
       "      <td>0.010366</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NumStreet</th>\n",
       "      <td>0.007794</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PctLargHouseFam</th>\n",
       "      <td>0.006724</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PctVacantBoarded</th>\n",
       "      <td>0.006715</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NumIlleg</th>\n",
       "      <td>0.006278</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FemalePctDiv</th>\n",
       "      <td>0.005259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LemasPctOfficDrugUn</th>\n",
       "      <td>0.004984</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TotalPctDiv</th>\n",
       "      <td>0.004951</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pctWPubAsst</th>\n",
       "      <td>0.004556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MalePctDivorce</th>\n",
       "      <td>0.003888</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PctRecImmig10</th>\n",
       "      <td>0.003188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pctUrban</th>\n",
       "      <td>0.002095</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NumUnderPov</th>\n",
       "      <td>0.001661</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PctRecImmig8</th>\n",
       "      <td>0.001317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NumInShelters</th>\n",
       "      <td>0.001068</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PctForeignBorn</th>\n",
       "      <td>0.000757</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PctHousOccup</th>\n",
       "      <td>-0.001070</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pctWInvInc</th>\n",
       "      <td>-0.004847</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PctYoungKids2Par</th>\n",
       "      <td>-0.013634</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PctTeen2Par</th>\n",
       "      <td>-0.013979</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PctFam2Par</th>\n",
       "      <td>-0.017770</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PctKids2Par</th>\n",
       "      <td>-0.027417</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Values\n",
       "bias                 0.205579\n",
       "PctIlleg             0.042592\n",
       "PctPersDenseHous     0.015418\n",
       "HousVacant           0.010366\n",
       "NumStreet            0.007794\n",
       "PctLargHouseFam      0.006724\n",
       "PctVacantBoarded     0.006715\n",
       "NumIlleg             0.006278\n",
       "FemalePctDiv         0.005259\n",
       "LemasPctOfficDrugUn  0.004984\n",
       "TotalPctDiv          0.004951\n",
       "pctWPubAsst          0.004556\n",
       "MalePctDivorce       0.003888\n",
       "PctRecImmig10        0.003188\n",
       "pctUrban             0.002095\n",
       "NumUnderPov          0.001661\n",
       "PctRecImmig8         0.001317\n",
       "NumInShelters        0.001068\n",
       "PctForeignBorn       0.000757\n",
       "PctHousOccup        -0.001070\n",
       "pctWInvInc          -0.004847\n",
       "PctYoungKids2Par    -0.013634\n",
       "PctTeen2Par         -0.013979\n",
       "PctFam2Par          -0.017770\n",
       "PctKids2Par         -0.027417"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weight_df = pd.DataFrame.from_dict(weights_dict,orient = 'index', columns = ['Values'])\n",
    "weight_df[weight_df['Values'] != 0].sort_values('Values', ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 356,
   "id": "504cab8e-b3f9-460e-9a7e-72ac9bd13dd8",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# def ValCurveLasso2(X_train: np.ndarray,\n",
    "#                     y_train: np.ndarray,\n",
    "#                     X_test: np.ndarray,\n",
    "#                     y_test: np.ndarray,\n",
    "#                     param_range: list,\n",
    "#                     ):\n",
    "#     \"\"\" Compute a validation curve\n",
    "#     Args: \n",
    "#         X: data capable of being fed into model\n",
    "#         y: target variable capable of being predicted by model\n",
    "#         param_range: list of range for parameter of interest in this case lambda\n",
    "        \n",
    "#         start_weight: start weight\n",
    "#         start_bias: starting bias\n",
    "#         learning_rate: learning rate for lass\n",
    "        \n",
    "#     Returns:\n",
    "#         Nothing, but outputs a nice plot\n",
    "#     \"\"\"\n",
    "    \n",
    "#     train_scores = []\n",
    "#     test_scores = []\n",
    "    \n",
    "    \n",
    "#     for param in param_range:\n",
    "        \n",
    "#         model = Lasso(alpha = param)#train the model and capture weights\n",
    "#         model.fit(X_train,y_train)\n",
    "        \n",
    "#         #get predictions\n",
    "#         train_preds = model.predict(X_train)\n",
    "#         test_preds = model.predict(X_test)\n",
    "#         #get errors.      \n",
    "#         train_score = mean_squared_error(train_preds, y_train)\n",
    "#         test_score = mean_squared_error(test_preds, y_test)\n",
    "#         train_scores.append(train_score)\n",
    "#         test_scores.append(test_score)\n",
    "#         print(\"Scores for parameter = {} calculated \\n train score: {:.5} \\n test score: {:.5}\".format(param, train_score, test_score))\n",
    "    \n",
    "#     plt.plot(param_range, train_scores, color='blue', marker='o', markersize=5, label='training accuracy')\n",
    "#     plt.plot(param_range, test_scores, color='green', linestyle='--', marker='s', markersize=5, label='test accuracy')\n",
    "    \n",
    "#     plt.grid()\n",
    "#     plt.xscale('log')\n",
    "#     plt.legend(loc='lower right')\n",
    "#     plt.xlabel('Parameter C')\n",
    "#     plt.ylabel('MSE')\n",
    "#     plt.show()    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e1726ffa-b8ad-4ec2-a710-3ce66f9b8dd6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "419dce1c-b3e3-4363-b915-ee874df9c31f",
   "metadata": {},
   "source": [
    "### A6 Logistic Regression\n",
    "\n",
    "1. See a derivation for the gradients below\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77e806ba-b07f-423b-882e-2f49fad84416",
   "metadata": {},
   "source": [
    "Given $J(w,b)  = \\sum_1 ^n (1 + e^{y_i * (b + x_i ^T w)}) + \\lambda *||w||_2^2$ \n",
    "\n",
    "let $z = y_i * (b + x_i ^T w)$\n",
    "\n",
    "Then we have:\n",
    "\n",
    "\\begin{split}\n",
    "\\nabla_w J(w,b) & = \\frac{1}{n}\\sum_1^n ln (1+e^z) + \\lambda ||w||_2^2 \\\\\n",
    " & = \\frac{1}{n} \\sum_1^n \\cfrac{(1+e^z)'}{1+e^z} + 2\\lambda w \\\\\n",
    " & =  \\frac{1}{n} \\sum_1^n \\cfrac{z'e^z}{1+e^z} + 2\\lambda w \n",
    "\\end{split}\n",
    "\n",
    "where we have:\n",
    "\n",
    "\\begin{split}\n",
    "z & = (-y_i (b+x_i^T w))\\\\\n",
    " & = -y_i b - y_i x_i ^T w \\\\\n",
    "\\frac{dz}{dw} & = 0 - y_i x_i\\\\\n",
    "\\implies \\frac{dz}{db} &= - y_i + 0\n",
    "\\end{split}\n",
    "\n",
    "\n",
    "\n",
    "Thus:\n",
    "\\begin{split}\n",
    "\\nabla_w J(w,b) & =  \\frac{1}{n} \\sum_1^n \\cfrac{z'e^z}{1+e^z} + 2\\lambda w \\\\\n",
    "&= \\frac{1}{n} \\sum_1^n \\cfrac{-y_i x_i e^z}{1+e^z} + 2\\lambda w \\\\\n",
    "\\nabla_b J(w,b) & = \\frac{1}{n} \\sum_1^n \\cfrac{-y_i e^z}{1+e^z}\n",
    "\\end{split}\n",
    "\n",
    "Or in expanded form we have the partial derivatives given by:\n",
    "\n",
    "$$\\frac{\\partial j(w,b)}{\\partial w} = \\sum_{i=1}^n \\frac{-y_i x_i e^{y_i * (b + x_i^T w)}}{1 + e^{y_i * (b + x_i^T w)}} + 2\\lambda w$$\n",
    "$$\\frac{\\partial j(w,b)}{\\partial b} = \\sum_{i=1}^n \\frac{-y_ie^{y_i * (b + x_i^T w)}}{1 + e^{y_i * (b + x_i^T w)}}$$\n",
    "\n",
    "Given $$\\mu(w,b) = \\frac{1}{1+ e^{y_i(b+x_i^T w)}} = \\frac{1}{1+ e^{z}}$$\n",
    "\n",
    "We can rewrite our gradients:\n",
    "\n",
    "\\begin{split}\n",
    "\\nabla_w J(w,b) & =  \\frac{1}{n} \\sum_1^n \\cfrac{z'e^z}{1+e^z} + 2\\lambda w  =\\frac{1}{n} \\sum_1^n z'\\cfrac{(1+ e^z) - 1}{1+e^z} + 2\\lambda w \\\\\n",
    "&= \\frac{1}{n} \\sum_1^n z'\\bigg(\\cfrac{1+ e^z}{1+e^z} - \\cfrac{1}{1+e^z}\\bigg) + 2\\lambda w  = \\frac{1}{n} \\sum_1^n z'\\bigg(1 - \\cfrac{1}{1+e^z}\\bigg) + 2\\lambda w\\\\\n",
    "\\nabla_w J(w,b) & =\\frac{1}{n}  \\sum_1^n -y_ix_i(1 - \\mu(w,b)) + 2\\lambda w\n",
    "\\end{split}\n",
    "\n",
    "Similarly\n",
    "\n",
    "$$\\nabla_b J(w,b) = \\frac{1}{n} \\sum_1^n -y_i(1 - \\mu(w,b))$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "d329055f-f845-4fee-bca8-f191e8566f20",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "class LogisticRegression:\n",
    "    def __init__(self, lr=0.01, num_iter=100000, fit_intercept=True, verbose=False):\n",
    "        self.lr = lr\n",
    "        self.num_iter = num_iter\n",
    "        self.fit_intercept = fit_intercept\n",
    "        self.verbose = verbose\n",
    "    \n",
    "    def __add_intercept(self, X):\n",
    "        intercept = np.ones((X.shape[0], 1))\n",
    "        return np.concatenate((intercept, X), axis=1)\n",
    "    \n",
    "    def __sigmoid(self, z):\n",
    "        return 1 / (1 + np.exp(-z))\n",
    "    \n",
    "    def __loss(self, h, y, w, lam):\n",
    "        return (-y * np.log(h) - (1 - y) * np.log(1 - h)).mean() + lam * np.sum(np.square(w))\n",
    "    \n",
    "    def fit(self, X, y, lam=0.1):\n",
    "        if self.fit_intercept:\n",
    "            X = self.__add_intercept(X)\n",
    "        \n",
    "        self.theta = np.zeros(X.shape[1])\n",
    "        \n",
    "        for i in range(self.num_iter):\n",
    "            z = np.dot(X, self.theta)\n",
    "            h = self.__sigmoid(z)\n",
    "            gradient = np.dot(X.T, (h - y)) / y.size + 2 * lam * self.theta\n",
    "            self.theta -= self.lr * gradient\n",
    "            \n",
    "            if self.verbose and i % 10000 == 0:\n",
    "                z = np.dot(X, self.theta)\n",
    "                h = self.__sigmoid(z)\n",
    "                print(f'loss: {self.__loss(h, y, self.theta, lam)} \\t')\n",
    "    \n",
    "    def predict_prob(self, X):\n",
    "        if self.fit_intercept:\n",
    "            X = self.__add_intercept(X)\n",
    "        \n",
    "        return self.__sigmoid(np.dot(X, self.theta))\n",
    "    \n",
    "    def predict(self, X, threshold=0.5):\n",
    "        return self.predict_prob(X) >= threshold"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "id": "1c2e1306-d0d4-4140-8ae9-41b53a9f0194",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "part c\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from typing import Dict, List, Tuple\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "from utils import load_dataset, problem\n",
    "\n",
    "# When choosing your batches / Shuffling your data you should use this RNG variable, and not `np.random.choice` etc.\n",
    "RNG = np.random.RandomState(seed=446)\n",
    "Dataset = Tuple[Tuple[np.ndarray, np.ndarray], Tuple[np.ndarray, np.ndarray]]\n",
    "\n",
    "\n",
    "def load_2_7_mnist() -> Dataset:\n",
    "    \"\"\"\n",
    "    Loads MNIST data, extracts only examples with 2, 7 as labels, and converts them into -1, 1 labels, respectively.\n",
    "\n",
    "    Returns:\n",
    "        Dataset: 2 tuples of numpy arrays, each containing examples and labels.\n",
    "            First tuple is for training, while second is for testing.\n",
    "            Shapes as as follows: ((n, d), (n,)), ((m, d), (m,))\n",
    "    \"\"\"\n",
    "    (x_train, y_train), (x_test, y_test) = load_dataset(\"mnist\")\n",
    "    train_idxs = np.logical_or(y_train == 2, y_train == 7)\n",
    "    test_idxs = np.logical_or(y_test == 2, y_test == 7)\n",
    "\n",
    "    y_train_2_7 = y_train[train_idxs]\n",
    "    y_train_2_7 = np.where(y_train_2_7 == 7, 1, -1)\n",
    "\n",
    "    y_test_2_7 = y_test[test_idxs]\n",
    "    y_test_2_7 = np.where(y_test_2_7 == 7, 1, -1)\n",
    "\n",
    "    return (x_train[train_idxs], y_train_2_7), (x_test[test_idxs], y_test_2_7)\n",
    "\n",
    "\n",
    "class BinaryLogReg:\n",
    "    @problem.tag(\"hw2-A\", start_line=4)\n",
    "    def __init__(self, _lambda: float = 1e-3):\n",
    "        \"\"\"Initializes the Binary Log Regression model.\n",
    "        NOTE: Please DO NOT change `self.weight` and `self.bias` values, since it may break testing and lead to lost points!\n",
    "\n",
    "        Args:\n",
    "            _lambda (float, optional): Ridge Regularization coefficient. Defaults to 1e-3.\n",
    "        \"\"\"\n",
    "        self._lambda: float = _lambda\n",
    "        # Fill in with matrix with the correct shape\n",
    "        self.weight: np.ndarray = None  # type: ignore\n",
    "        self.bias: float = 0.0\n",
    "\n",
    "    @problem.tag(\"hw2-A\")\n",
    "    def mu(self, X: np.ndarray, y: np.ndarray) -> np.ndarray:\n",
    "        \"\"\"Calculate mu in vectorized form, as described in the problem.\n",
    "        The equation for i^th element of vector mu is given by:\n",
    "\n",
    "        $$ \\mu_i = 1 / (1 + \\exp(-y_i (bias + x_i^T weight))) $$\n",
    "\n",
    "        Args:\n",
    "            X (np.ndarray): observations represented as `(n, d)` matrix.\n",
    "                n is number of observations, d is number of features.\n",
    "                d = 784 in case of MNIST.\n",
    "            y (np.ndarray): targets represented as `(n, )` vector.\n",
    "                n is number of observations.\n",
    "\n",
    "        Returns:\n",
    "            np.ndarray: An `(n, )` vector containing mu_i for i^th element.\n",
    "        \"\"\"\n",
    "        mu = 1/(1+np.exp(-y * (self.bias + (X @ self.weight))))\n",
    "        return mu\n",
    "    \n",
    "    @problem.tag(\"hw2-A\")\n",
    "    def loss(self, X: np.ndarray, y: np.ndarray) -> float:\n",
    "        \"\"\"Calculate loss J as defined in the problem.\n",
    "\n",
    "        Args:\n",
    "            X (np.ndarray): observations represented as `(n, d)` matrix.\n",
    "                n is number of observations, d is number of features.\n",
    "                d = 784 in case of MNIST.\n",
    "            y (np.ndarray): targets represented as `(n, )` vector.\n",
    "                n is number of observations.\n",
    "\n",
    "        Returns:\n",
    "            float: Loss given X, y, self.weight, self.bias and self._lambda\n",
    "        \"\"\"\n",
    "        y_hat = self.bias + (X @ self.weight)\n",
    "        error = np.log(1 + np.exp(-y * y_hat))\n",
    "        regularization = self._lambda * np.sum(np.square(self.weight))\n",
    "        return(error.mean() + regularization)\n",
    "                                                                                          \n",
    "    @problem.tag(\"hw2-A\")\n",
    "    def gradient_J_weight(self, X: np.ndarray, y: np.ndarray) -> np.ndarray:\n",
    "        \"\"\"Calculate gradient of loss J with respect to weight.\n",
    "\n",
    "        Args:\n",
    "            X (np.ndarray): observations represented as `(n, d)` matrix.\n",
    "                n is number of observations, d is number of features.\n",
    "                d = 784 in case of MNIST.\n",
    "            y (np.ndarray): targets represented as `(n, )` vector.\n",
    "                n is number of observations.\n",
    "        Returns:\n",
    "            np.ndarray: An `(d, )` vector which represents gradient of loss J with respect to self.weight.\n",
    "        \"\"\"\n",
    "        n = X.shape[0]\n",
    "        grad_w = (1 / n) * np.dot(X.T, self.mu(X,y) - y) + (2 * self._lambda * self.weight)\n",
    "        #return(grad_w)\n",
    "        return(np.mean((self.mu(X, y) - 1) * y * X.T, axis=1) + 2 * self._lambda * self.weight)\n",
    "\n",
    "    @problem.tag(\"hw2-A\")\n",
    "    def gradient_J_bias(self, X: np.ndarray, y: np.ndarray) -> float:\n",
    "        \"\"\"Calculate gradient of loss J with respect to bias.\n",
    "\n",
    "        Args:\n",
    "            X (np.ndarray): observations represented as `(n, d)` matrix.\n",
    "                n is number of observations, d is number of features.\n",
    "                d = 784 in case of MNIST.\n",
    "            y (np.ndarray): targets represented as `(n, )` vector.\n",
    "                n is number of observations.\n",
    "\n",
    "        Returns:\n",
    "            float: A number that represents gradient of loss J with respect to self.bias.\n",
    "        \"\"\"\n",
    "        n = X.shape[0]\n",
    "        grad_b = (1 / n) * np.sum(self.mu(X,y) - y)\n",
    "        #return(grad_b)\n",
    "        return np.mean(y * (self.mu(X, y) - 1))\n",
    "    \n",
    "    def __sigmoid(self, z):\n",
    "        return 1 / (1 + np.exp(-z))    \n",
    "    \n",
    "    @problem.tag(\"hw2-A\")\n",
    "    def predict(self, X: np.ndarray) -> np.ndarray:\n",
    "        \"\"\"Given X, weight and bias predict values of y.\n",
    "\n",
    "        Args:\n",
    "            X (np.ndarray): observations represented as `(n, d)` matrix.\n",
    "                n is number of observations, d is number of features.\n",
    "                d = 784 in case of MNIST.\n",
    "\n",
    "        Returns:\n",
    "            np.ndarray: An `(n, )` array of either -1s or 1s representing guess for each observation.\n",
    "        \"\"\"\n",
    "\n",
    "        pred_probit = self.__sigmoid(self.bias + (X @ self.weight))\n",
    "        \n",
    "        classes = pred_probit.copy()\n",
    "        classes[classes>0.5] = 1\n",
    "        classes[classes<0.5] = -1\n",
    "                                                                                        \n",
    "        return classes\n",
    "\n",
    "    @problem.tag(\"hw2-A\")\n",
    "    def misclassification_error(self, X: np.ndarray, y: np.ndarray) -> float:\n",
    "        \"\"\"Calculates misclassification error (the rate at which this model is making incorrect predictions of y).\n",
    "        Note that `misclassification_error = 1 - accuracy`.\n",
    "\n",
    "        Args:\n",
    "            X (np.ndarray): observations represented as `(n, d)` matrix.\n",
    "                n is number of observations, d is number of features.\n",
    "                d = 784 in case of MNIST.\n",
    "            y (np.ndarray): targets represented as `(n, )` vector.\n",
    "                n is number of observations.\n",
    "\n",
    "        Returns:\n",
    "            float: percentage of times prediction did not match target, given an observation (i.e. misclassification error).\n",
    "        \"\"\"\n",
    "        return(np.mean(self.predict(X) != y))\n",
    "\n",
    "    @problem.tag(\"hw2-A\")\n",
    "    def step(self, X: np.ndarray, y: np.ndarray, learning_rate: float = 1e-4):\n",
    "        \"\"\"Single step in training loop.\n",
    "        It does not return anything but should update self.weight and self.bias with correct values.\n",
    "\n",
    "        Args:\n",
    "            X (np.ndarray): observations represented as `(n, d)` matrix.\n",
    "                n is number of observations, d is number of features.\n",
    "                d = 784 in case of MNIST.\n",
    "            y (np.ndarray): targets represented as `(n, )` vector.\n",
    "                n is number of observations.\n",
    "            learning_rate (float, optional): Learning rate of SGD/GD algorithm.\n",
    "                Defaults to 1e-4.\n",
    "        \"\"\"\n",
    "        self.weight = self.weight - learning_rate * self.gradient_J_weight(X,y)\n",
    "        self.bias = self.bias - learning_rate *self.gradient_J_bias(X,y)\n",
    "\n",
    "    @problem.tag(\"hw2-A\", start_line=7)\n",
    "    def train(\n",
    "        self,\n",
    "        X_train: np.ndarray,\n",
    "        y_train: np.ndarray,\n",
    "        X_test: np.ndarray,\n",
    "        y_test: np.ndarray,\n",
    "        learning_rate: float = 1e-2,\n",
    "        epochs: int = 30,\n",
    "        batch_size: int = 100,\n",
    "    ) -> Dict[str, List[float]]:\n",
    "        \"\"\"Train function that given dataset X_train and y_train adjusts weights and biases of this model.\n",
    "        It also should calculate misclassification error and J loss at the END of each epoch.\n",
    "\n",
    "        For each epoch please call step function `num_batches` times as defined on top of the starter code.\n",
    "\n",
    "        NOTE: This function due to complexity and number of possible implementations will not be publicly unit tested.\n",
    "        However, we might still test it using gradescope, and you will be graded based on the plots that are generated using this function.\n",
    "\n",
    "        Args:\n",
    "            X_train (np.ndarray): observations in training set represented as `(n, d)` matrix.\n",
    "                n is number of observations, d is number of features.\n",
    "                d = 784 in case of MNIST.\n",
    "            y_train (np.ndarray): targets in training set represented as `(n, )` vector.\n",
    "                n is number of observations.\n",
    "            X_test (np.ndarray): observations in testing set represented as `(m, d)` matrix.\n",
    "                m is number of observations, d is number of features.\n",
    "                d = 784 in case of MNIST.\n",
    "            y_test (np.ndarray): targets in testing set represented as `(m, )` vector.\n",
    "                m is number of observations.\n",
    "            learning_rate (float, optional): Learning rate of SGD/GD algorithm. Defaults to 1e-2.\n",
    "            epochs (int, optional): Number of epochs (loops through the whole data) to train SGD/GD algorithm for.\n",
    "                Defaults to 30.\n",
    "            batch_size (int, optional): Number of observation/target pairs to use for a single update.\n",
    "                Defaults to 100.\n",
    "\n",
    "        Returns:\n",
    "            Dict[str, List[float]]: Dictionary containing 4 keys, each pointing to a list/numpy array of length `epochs`:\n",
    "            {\n",
    "                \"training_losses\": [<Loss at the end of each epoch on training set>],\n",
    "                \"training_errors\": [<Misclassification error at the end of each epoch on training set>],\n",
    "                \"testing_losses\": [<Same as above but for testing set>],\n",
    "                \"testing_errors\": [<Same as above but for testing set>],\n",
    "            }\n",
    "            Skeleton for this result is provided in the starter code.\n",
    "\n",
    "        Note:\n",
    "            - When shuffling batches/randomly choosing batches makes sure you are using RNG variable defined on the top of the file.\n",
    "        \"\"\"\n",
    "        num_batches = int(np.ceil(len(X_train) // batch_size))\n",
    "        result: Dict[str, List[float]] = {\n",
    "            \"train_losses\": [],  # You should append to these lists\n",
    "            \"train_errors\": [],\n",
    "            \"test_losses\": [],\n",
    "            \"test_errors\": [],\n",
    "        }\n",
    "        # initialize weight\n",
    "        n, d = X_train.shape\n",
    "        if self.weight is None:\n",
    "            self.weight = np.zeros(d)\n",
    "\n",
    "        for i in range(epochs):\n",
    "            if (batch_size < n):\n",
    "                shuffle = RNG.permutation(n)\n",
    "                X_train = X_train[shuffle]\n",
    "                y_train = y_train[shuffle]\n",
    "            for j in range(num_batches):\n",
    "                batch_start = j * batch_size\n",
    "                batch_end = min(batch_start + batch_size, n)\n",
    "                self.step(X_train[batch_start:batch_end], y_train[batch_start:batch_end], learning_rate)\n",
    "            result[\"train_losses\"].append(self.loss(X_train, y_train))\n",
    "            result[\"test_losses\"].append(self.loss(X_test, y_test))\n",
    "            result[\"train_errors\"].append(self.misclassification_error(X_train, y_train))\n",
    "            result[\"test_errors\"].append(self.misclassification_error(X_test, y_test))\n",
    "\n",
    "        return result\n",
    "            \n",
    "def make_plots(history: Dict[str, List[float]]):\n",
    "    # Plot losses\n",
    "    plt.plot(history[\"train_losses\"], label=\"Train\")\n",
    "    plt.plot(history[\"test_losses\"], label=\"Test\")\n",
    "    plt.xlabel(\"Epochs\")\n",
    "    plt.ylabel(\"Loss\")\n",
    "    plt.legend()\n",
    "    plt.show()\n",
    "\n",
    "    # Plot error\n",
    "    plt.plot(history[\"train_errors\"], label=\"Train\")\n",
    "    plt.plot(history[\"test_errors\"], label=\"Test\")\n",
    "    plt.xlabel(\"Epochs\")\n",
    "    plt.ylabel(\"Misclassification Error\")\n",
    "    plt.legend()\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    model = BinaryLogReg()\n",
    "    (x_train, y_train), (x_test, y_test) = load_2_7_mnist()\n",
    "\n",
    "    n, d = x_train.shape\n",
    "    model._lambda = 0.1\n",
    "\n",
    "    # part b\n",
    "    # print('part b')\n",
    "    # learning_rate = 0.3\n",
    "    # epochs = 100\n",
    "    # batch_size = n\n",
    "    # history = model.train(x_train, y_train, x_test, y_test, learning_rate, epochs, batch_size)\n",
    "    # make_plots(history)\n",
    "\n",
    "    # part c\n",
    "    print('part c')\n",
    "    learning_rate = 0.00003\n",
    "    epochs = 80\n",
    "    batch_size = 1\n",
    "    history = model.train(x_train, y_train, x_test, y_test, learning_rate, epochs, batch_size)\n",
    "    make_plots(history)\n",
    "\n",
    "    # part d\n",
    "    # print('part d')\n",
    "    # learning_rate = 0.003\n",
    "    # epochs = 100\n",
    "    # batch_size = 100\n",
    "    # history = model.train(x_train, y_train, x_test, y_test, learning_rate, epochs, batch_size)\n",
    "    # make_plots(history)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "id": "22e5b6e7-db14-427d-bf3f-29dbbc4760cd",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'NoneType' object is not subscriptable",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[249], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[43mhistory\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mtest_errors\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\n",
      "\u001b[1;31mTypeError\u001b[0m: 'NoneType' object is not subscriptable"
     ]
    }
   ],
   "source": [
    "history['test_errors']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "id": "ff6dd043-9db0-4730-bf10-5d302c473be6",
   "metadata": {},
   "outputs": [],
   "source": [
    "weight = np.linspace(0, 1, 784) * np.tile([-1, 1], reps=784 // 2)\n",
    "bias = 0\n",
    "X = np.linspace(0, 1, num=30 * 784).reshape((30, 784)) - 0.5\n",
    "y = np.ones(30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "id": "863d7e78-9ad4-44ac-a46e-e7b8519ecf8e",
   "metadata": {},
   "outputs": [],
   "source": [
    "probs = (1/(1+np.exp((bias + X@weight))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "id": "58af8c58-427d-45cc-9948-5c98a6ebfd70",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.0"
      ]
     },
     "execution_count": 243,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.ceil(len(X)//(len(X)-15))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "id": "09eca0c7-10dc-4bcc-99df-db1a3e9f80bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.,\n",
       "       -1., -1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,\n",
       "        1.,  1.,  1.,  1.])"
      ]
     },
     "execution_count": 231,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sign(bias + X@weight)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "id": "6ded9dad-a395-4e74-b98b-04a34b572a4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def predict(self, X: np.ndarray) -> np.ndarray:\n",
    "        \"\"\"Given X, weight and bias predict values of y.\n",
    "\n",
    "        Args:\n",
    "            X (np.ndarray): observations represented as `(n, d)` matrix.\n",
    "                n is number of observations, d is number of features.\n",
    "                d = 784 in case of MNIST.\n",
    "\n",
    "        Returns:\n",
    "            np.ndarray: An `(n, )` array of either -1s or 1s representing guess for each observation.\n",
    "        \"\"\"\n",
    "\n",
    "        pred_probit = self.__sigmoid(self.bias + (X @ self.weight))\n",
    "        \n",
    "        classes = pred_probit.copy()\n",
    "        classes[classes>0] = 1\n",
    "        classes[classes<0] = -1\n",
    "                                                                                        \n",
    "        return classes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "238bcc6d-8128-40e7-b5ba-25a337caff2f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(30,)"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(2 + (X@weight)).shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "24312f8c-3467-43ca-be92-559903b3a96d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(30,)"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "id": "1de0b916-a0a9-4817-9c0a-ba1a1c5484ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "k = 1/(1+np.exp(-y *(2 + (X@weight))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "id": "e4d848a7-25cd-4819-9803-7d01722eddc9",
   "metadata": {},
   "outputs": [],
   "source": [
    "k[k>0.9] =1\n",
    "k[k<0.9] = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "id": "0c626d6b-3adb-4984-a9c7-23a56170ebbc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1.,\n",
       "       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])"
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "k"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "d6bdf09f-23ad-44ab-a5d8-d716b38c4afe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(784,)"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weight.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "c81efbab-da65-4847-930d-476383abb9e2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(784,)"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X[0,:].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8d8d7e11-7abc-407b-bccd-dba56ed29d9e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "cse446",
   "language": "python",
   "name": "cse446"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
